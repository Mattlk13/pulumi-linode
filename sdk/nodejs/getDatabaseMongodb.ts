// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides information about a Linode MongoDB Database.
 *
 * ## Example Usage
 *
 * Get information about a MongoDB database:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const my_db = pulumi.output(linode.getDatabaseMongodb({
 *     databaseId: 12345,
 * }));
 * ```
 * ## Attributes
 *
 * The `linode.DatabaseMongodb` data source exports the following attributes:
 *
 * * `allowList` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
 *
 * * `caCert` - The base64-encoded SSL CA certificate for the Managed Database instance.
 *
 * * `clusterSize` - The number of Linode Instance nodes deployed to the Managed Database.
 *
 * * `compressionType` - The type of data compression for this Database. (`none`, `snappy`, `zlib`)
 *
 * * `created` - When this Managed Database was created.
 *
 * * `encrypted` - Whether the Managed Databases is encrypted.
 *
 * * `engine` - The Managed Database engine. (e.g. `mongodb`)
 *
 * * `engineId` - The Managed Database engine in engine/version format. (e.g. `mongodb/4.4.10`)
 *
 * * `hostPrimary` - The primary host for the Managed Database.
 *
 * * `hostSecondary` - The secondary/private network host for the Managed Database.
 *
 * * `label` - A unique, user-defined string referring to the Managed Database.
 *
 * * `peers` - A set of peer addresses for this Database.
 *
 * * `port` - The access port for this Managed Database.
 *
 * * `replicaSet` - Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
 *
 * * `region` - The region that hosts this Linode Managed Database.
 *
 * * `rootPassword` - The randomly-generated root password for the Managed Database instance.
 *
 * * `rootUsername` - The root username for the Managed Database instance.
 *
 * * `sslConnection` - Whether to require SSL credentials to establish a connection to the Managed Database.
 *
 * * `storageEngine` - The type of storage engine for this Database. (`mmapv1`, `wiredtiger`)
 *
 * * `status` - The operating status of the Managed Database.
 *
 * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
 *
 * * `updated` - When this Managed Database was last updated.
 *
 * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
 *
 * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
 *
 * ## updates
 *
 * The following arguments are exported by the `updates` specification block:
 *
 * * `dayOfWeek` - The day to perform maintenance. (`monday`, `tuesday`, ...)
 *
 * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
 *
 * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
 *
 * * `hourOfDay` - The hour to begin maintenance based in UTC time. (`0`..`23`)
 *
 * * `weekOfMonth` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
 */
export function getDatabaseMongodb(args: GetDatabaseMongodbArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseMongodbResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("linode:index/getDatabaseMongodb:getDatabaseMongodb", {
        "databaseId": args.databaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseMongodb.
 */
export interface GetDatabaseMongodbArgs {
    /**
     * The ID of the MongoDB database.
     */
    databaseId: number;
}

/**
 * A collection of values returned by getDatabaseMongodb.
 */
export interface GetDatabaseMongodbResult {
    readonly allowLists: string[];
    readonly caCert: string;
    readonly clusterSize: number;
    readonly compressionType: string;
    readonly created: string;
    readonly databaseId: number;
    readonly encrypted: boolean;
    readonly engine: string;
    readonly engineId: string;
    readonly hostPrimary: string;
    readonly hostSecondary: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly label: string;
    readonly peers: string[];
    readonly port: number;
    readonly region: string;
    readonly replicaSet: string;
    readonly rootPassword: string;
    readonly rootUsername: string;
    readonly sslConnection: boolean;
    readonly status: string;
    readonly storageEngine: string;
    readonly type: string;
    readonly updated: string;
    readonly updates: outputs.GetDatabaseMongodbUpdate[];
    readonly version: string;
}

export function getDatabaseMongodbOutput(args: GetDatabaseMongodbOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseMongodbResult> {
    return pulumi.output(args).apply(a => getDatabaseMongodb(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseMongodb.
 */
export interface GetDatabaseMongodbOutputArgs {
    /**
     * The ID of the MongoDB database.
     */
    databaseId: pulumi.Input<number>;
}
