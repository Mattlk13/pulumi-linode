// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a Linode PostgreSQL Database.
//
// ## Example Usage
//
// Get information about a PostgreSQL database:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-linode/sdk/v3/go/linode"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := linode.LookupDatabasePostgresql(ctx, &GetDatabasePostgresqlArgs{
// 			DatabaseId: 12345,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes
//
// The `DatabasePostgresql` data source exports the following attributes:
//
// * `allowList` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
//
// * `caCert` - The base64-encoded SSL CA certificate for the Managed Database instance.
//
// * `clusterSize` - The number of Linode Instance nodes deployed to the Managed Database.
//
// * `created` - When this Managed Database was created.
//
// * `encrypted` - Whether the Managed Databases is encrypted.
//
// * `engine` - The Managed Database engine. (e.g. `postgresql`)
//
// * `engineId` - The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)
//
// * `hostPrimary` - The primary host for the Managed Database.
//
// * `hostSecondary` - The secondary/private network host for the Managed Database.
//
// * `label` - A unique, user-defined string referring to the Managed Database.
//
// * `region` - The region that hosts this Linode Managed Database.
//
// * `rootPassword` - The randomly-generated root password for the Managed Database instance.
//
// * `rootUsername` - The root username for the Managed Database instance.
//
// * `replicationType` - The replication method used for the Managed Database. (`none`, `asynch`, `semiSynch`)
//
// * `replicationCommitType` - (Optional) The synchronization level of the replicating server. (`on`, `local`, `remoteWrite`, `remoteApply`, `off`)
//
// * `sslConnection` - Whether to require SSL credentials to establish a connection to the Managed Database.
//
// * `status` - The operating status of the Managed Database.
//
// * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
//
// * `updated` - When this Managed Database was last updated.
//
// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
//
// * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
//
// ## updates
//
// The following arguments are exported by the `updates` specification block:
//
// * `dayOfWeek` - The day to perform maintenance. (`monday`, `tuesday`, ...)
//
// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
//
// * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
//
// * `hourOfDay` - The hour to begin maintenance based in UTC time. (`0`..`23`)
//
// * `weekOfMonth` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
func LookupDatabasePostgresql(ctx *pulumi.Context, args *LookupDatabasePostgresqlArgs, opts ...pulumi.InvokeOption) (*LookupDatabasePostgresqlResult, error) {
	var rv LookupDatabasePostgresqlResult
	err := ctx.Invoke("linode:index/getDatabasePostgresql:getDatabasePostgresql", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabasePostgresql.
type LookupDatabasePostgresqlArgs struct {
	// The ID of the PostgreSQL database.
	DatabaseId int `pulumi:"databaseId"`
}

// A collection of values returned by getDatabasePostgresql.
type LookupDatabasePostgresqlResult struct {
	AllowLists    []string `pulumi:"allowLists"`
	CaCert        string   `pulumi:"caCert"`
	ClusterSize   int      `pulumi:"clusterSize"`
	Created       string   `pulumi:"created"`
	DatabaseId    int      `pulumi:"databaseId"`
	Encrypted     bool     `pulumi:"encrypted"`
	Engine        string   `pulumi:"engine"`
	EngineId      string   `pulumi:"engineId"`
	HostPrimary   string   `pulumi:"hostPrimary"`
	HostSecondary string   `pulumi:"hostSecondary"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                        `pulumi:"id"`
	Label                 string                        `pulumi:"label"`
	Port                  int                           `pulumi:"port"`
	Region                string                        `pulumi:"region"`
	ReplicationCommitType string                        `pulumi:"replicationCommitType"`
	ReplicationType       string                        `pulumi:"replicationType"`
	RootPassword          string                        `pulumi:"rootPassword"`
	RootUsername          string                        `pulumi:"rootUsername"`
	SslConnection         bool                          `pulumi:"sslConnection"`
	Status                string                        `pulumi:"status"`
	Type                  string                        `pulumi:"type"`
	Updated               string                        `pulumi:"updated"`
	Updates               []GetDatabasePostgresqlUpdate `pulumi:"updates"`
	Version               string                        `pulumi:"version"`
}

func LookupDatabasePostgresqlOutput(ctx *pulumi.Context, args LookupDatabasePostgresqlOutputArgs, opts ...pulumi.InvokeOption) LookupDatabasePostgresqlResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabasePostgresqlResult, error) {
			args := v.(LookupDatabasePostgresqlArgs)
			r, err := LookupDatabasePostgresql(ctx, &args, opts...)
			var s LookupDatabasePostgresqlResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabasePostgresqlResultOutput)
}

// A collection of arguments for invoking getDatabasePostgresql.
type LookupDatabasePostgresqlOutputArgs struct {
	// The ID of the PostgreSQL database.
	DatabaseId pulumi.IntInput `pulumi:"databaseId"`
}

func (LookupDatabasePostgresqlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabasePostgresqlArgs)(nil)).Elem()
}

// A collection of values returned by getDatabasePostgresql.
type LookupDatabasePostgresqlResultOutput struct{ *pulumi.OutputState }

func (LookupDatabasePostgresqlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabasePostgresqlResult)(nil)).Elem()
}

func (o LookupDatabasePostgresqlResultOutput) ToLookupDatabasePostgresqlResultOutput() LookupDatabasePostgresqlResultOutput {
	return o
}

func (o LookupDatabasePostgresqlResultOutput) ToLookupDatabasePostgresqlResultOutputWithContext(ctx context.Context) LookupDatabasePostgresqlResultOutput {
	return o
}

func (o LookupDatabasePostgresqlResultOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

func (o LookupDatabasePostgresqlResultOutput) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.CaCert }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) int { return v.ClusterSize }).(pulumi.IntOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Created }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) DatabaseId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) int { return v.DatabaseId }).(pulumi.IntOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) bool { return v.Encrypted }).(pulumi.BoolOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Engine }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.EngineId }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) HostPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.HostPrimary }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) HostSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.HostSecondary }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabasePostgresqlResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Label }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) int { return v.Port }).(pulumi.IntOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) ReplicationCommitType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.ReplicationCommitType }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) ReplicationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.ReplicationType }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.RootPassword }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) RootUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.RootUsername }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) SslConnection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) bool { return v.SslConnection }).(pulumi.BoolOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Updated }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Updates() GetDatabasePostgresqlUpdateArrayOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) []GetDatabasePostgresqlUpdate { return v.Updates }).(GetDatabasePostgresqlUpdateArrayOutput)
}

func (o LookupDatabasePostgresqlResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabasePostgresqlResultOutput{})
}
