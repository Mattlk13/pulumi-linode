// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// > **NOTICE:** You may need to contact support to increase your instance IP limit before you can allocate additional IPs.
//
// Manages a Linode instance IP.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-linode/sdk/v2/go/linode/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooInstance, err := linode.NewInstance(ctx, "fooInstance", &linode.InstanceArgs{
// 			Image:  pulumi.String("linode/alpine3.12"),
// 			Label:  pulumi.String("foobar-test"),
// 			Type:   pulumi.String("g6-nanode-1"),
// 			Region: pulumi.String("us-east"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = linode.NewInstanceIp(ctx, "fooInstanceIp", &linode.InstanceIpArgs{
// 			LinodeId: fooInstance.ID(),
// 			Public:   pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type InstanceIp struct {
	pulumi.CustomResourceState

	// The resulting IPv4 address.
	Address pulumi.StringOutput `pulumi:"address"`
	// The default gateway for this address
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId pulumi.IntOutput `pulumi:"linodeId"`
	// The number of bits set in the subnet mask.
	Prefix pulumi.IntOutput `pulumi:"prefix"`
	// Whether the IPv4 address is public or private. Defaults to true.
	Public pulumi.BoolPtrOutput `pulumi:"public"`
	// The reverse DNS assigned to this address.
	Rdns pulumi.StringOutput `pulumi:"rdns"`
	// The region this IP resides in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The mask that separates host bits from network bits for this address.
	SubnetMask pulumi.StringOutput `pulumi:"subnetMask"`
	// The type of IP address.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewInstanceIp registers a new resource with the given unique name, arguments, and options.
func NewInstanceIp(ctx *pulumi.Context,
	name string, args *InstanceIpArgs, opts ...pulumi.ResourceOption) (*InstanceIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LinodeId == nil {
		return nil, errors.New("invalid value for required argument 'LinodeId'")
	}
	var resource InstanceIp
	err := ctx.RegisterResource("linode:index/instanceIp:InstanceIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceIp gets an existing InstanceIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceIpState, opts ...pulumi.ResourceOption) (*InstanceIp, error) {
	var resource InstanceIp
	err := ctx.ReadResource("linode:index/instanceIp:InstanceIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceIp resources.
type instanceIpState struct {
	// The resulting IPv4 address.
	Address *string `pulumi:"address"`
	// The default gateway for this address
	Gateway *string `pulumi:"gateway"`
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId *int `pulumi:"linodeId"`
	// The number of bits set in the subnet mask.
	Prefix *int `pulumi:"prefix"`
	// Whether the IPv4 address is public or private. Defaults to true.
	Public *bool `pulumi:"public"`
	// The reverse DNS assigned to this address.
	Rdns *string `pulumi:"rdns"`
	// The region this IP resides in.
	Region *string `pulumi:"region"`
	// The mask that separates host bits from network bits for this address.
	SubnetMask *string `pulumi:"subnetMask"`
	// The type of IP address.
	Type *string `pulumi:"type"`
}

type InstanceIpState struct {
	// The resulting IPv4 address.
	Address pulumi.StringPtrInput
	// The default gateway for this address
	Gateway pulumi.StringPtrInput
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId pulumi.IntPtrInput
	// The number of bits set in the subnet mask.
	Prefix pulumi.IntPtrInput
	// Whether the IPv4 address is public or private. Defaults to true.
	Public pulumi.BoolPtrInput
	// The reverse DNS assigned to this address.
	Rdns pulumi.StringPtrInput
	// The region this IP resides in.
	Region pulumi.StringPtrInput
	// The mask that separates host bits from network bits for this address.
	SubnetMask pulumi.StringPtrInput
	// The type of IP address.
	Type pulumi.StringPtrInput
}

func (InstanceIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIpState)(nil)).Elem()
}

type instanceIpArgs struct {
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId int `pulumi:"linodeId"`
	// Whether the IPv4 address is public or private. Defaults to true.
	Public *bool `pulumi:"public"`
	// The reverse DNS assigned to this address.
	Rdns *string `pulumi:"rdns"`
}

// The set of arguments for constructing a InstanceIp resource.
type InstanceIpArgs struct {
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId pulumi.IntInput
	// Whether the IPv4 address is public or private. Defaults to true.
	Public pulumi.BoolPtrInput
	// The reverse DNS assigned to this address.
	Rdns pulumi.StringPtrInput
}

func (InstanceIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceIpArgs)(nil)).Elem()
}

type InstanceIpInput interface {
	pulumi.Input

	ToInstanceIpOutput() InstanceIpOutput
	ToInstanceIpOutputWithContext(ctx context.Context) InstanceIpOutput
}

func (*InstanceIp) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIp)(nil))
}

func (i *InstanceIp) ToInstanceIpOutput() InstanceIpOutput {
	return i.ToInstanceIpOutputWithContext(context.Background())
}

func (i *InstanceIp) ToInstanceIpOutputWithContext(ctx context.Context) InstanceIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceIpOutput)
}

type InstanceIpOutput struct {
	*pulumi.OutputState
}

func (InstanceIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceIp)(nil))
}

func (o InstanceIpOutput) ToInstanceIpOutput() InstanceIpOutput {
	return o
}

func (o InstanceIpOutput) ToInstanceIpOutputWithContext(ctx context.Context) InstanceIpOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceIpOutput{})
}
