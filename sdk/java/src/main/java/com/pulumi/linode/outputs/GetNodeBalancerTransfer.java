// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class GetNodeBalancerTransfer {
    /**
     * @return The total transfer, in MB, used by this NodeBalancer for the current month
     * 
     */
    private final Double in;
    /**
     * @return The total inbound transfer, in MB, used for this NodeBalancer for the current month
     * 
     */
    private final Double out;
    /**
     * @return The total outbound transfer, in MB, used for this NodeBalancer for the current month
     * 
     */
    private final Double total;

    @CustomType.Constructor
    private GetNodeBalancerTransfer(
        @CustomType.Parameter("in") Double in,
        @CustomType.Parameter("out") Double out,
        @CustomType.Parameter("total") Double total) {
        this.in = in;
        this.out = out;
        this.total = total;
    }

    /**
     * @return The total transfer, in MB, used by this NodeBalancer for the current month
     * 
     */
    public Double in() {
        return this.in;
    }
    /**
     * @return The total inbound transfer, in MB, used for this NodeBalancer for the current month
     * 
     */
    public Double out() {
        return this.out;
    }
    /**
     * @return The total outbound transfer, in MB, used for this NodeBalancer for the current month
     * 
     */
    public Double total() {
        return this.total;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeBalancerTransfer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double in;
        private Double out;
        private Double total;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNodeBalancerTransfer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.in = defaults.in;
    	      this.out = defaults.out;
    	      this.total = defaults.total;
        }

        public Builder in(Double in) {
            this.in = Objects.requireNonNull(in);
            return this;
        }
        public Builder out(Double out) {
            this.out = Objects.requireNonNull(out);
            return this;
        }
        public Builder total(Double total) {
            this.total = Objects.requireNonNull(total);
            return this;
        }        public GetNodeBalancerTransfer build() {
            return new GetNodeBalancerTransfer(in, out, total);
        }
    }
}
