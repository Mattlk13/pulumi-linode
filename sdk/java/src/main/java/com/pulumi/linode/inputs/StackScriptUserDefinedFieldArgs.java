// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackScriptUserDefinedFieldArgs extends com.pulumi.resources.ResourceArgs {

    public static final StackScriptUserDefinedFieldArgs Empty = new StackScriptUserDefinedFieldArgs();

    /**
     * The default value. If not specified, this value will be used.
     * 
     */
    @Import(name="default")
    private @Nullable Output<String> default_;

    /**
     * @return The default value. If not specified, this value will be used.
     * 
     */
    public Optional<Output<String>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * An example value for the field.
     * 
     */
    @Import(name="example")
    private @Nullable Output<String> example;

    /**
     * @return An example value for the field.
     * 
     */
    public Optional<Output<String>> example() {
        return Optional.ofNullable(this.example);
    }

    /**
     * The StackScript&#39;s label is for display purposes only.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The StackScript&#39;s label is for display purposes only.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * A list of acceptable values for the field in any quantity, combination or order.
     * 
     */
    @Import(name="manyOf")
    private @Nullable Output<String> manyOf;

    /**
     * @return A list of acceptable values for the field in any quantity, combination or order.
     * 
     */
    public Optional<Output<String>> manyOf() {
        return Optional.ofNullable(this.manyOf);
    }

    /**
     * The name of the field.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the field.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of acceptable single values for the field.
     * 
     */
    @Import(name="oneOf")
    private @Nullable Output<String> oneOf;

    /**
     * @return A list of acceptable single values for the field.
     * 
     */
    public Optional<Output<String>> oneOf() {
        return Optional.ofNullable(this.oneOf);
    }

    private StackScriptUserDefinedFieldArgs() {}

    private StackScriptUserDefinedFieldArgs(StackScriptUserDefinedFieldArgs $) {
        this.default_ = $.default_;
        this.example = $.example;
        this.label = $.label;
        this.manyOf = $.manyOf;
        this.name = $.name;
        this.oneOf = $.oneOf;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackScriptUserDefinedFieldArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackScriptUserDefinedFieldArgs $;

        public Builder() {
            $ = new StackScriptUserDefinedFieldArgs();
        }

        public Builder(StackScriptUserDefinedFieldArgs defaults) {
            $ = new StackScriptUserDefinedFieldArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param default_ The default value. If not specified, this value will be used.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<String> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ The default value. If not specified, this value will be used.
         * 
         * @return builder
         * 
         */
        public Builder default_(String default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param example An example value for the field.
         * 
         * @return builder
         * 
         */
        public Builder example(@Nullable Output<String> example) {
            $.example = example;
            return this;
        }

        /**
         * @param example An example value for the field.
         * 
         * @return builder
         * 
         */
        public Builder example(String example) {
            return example(Output.of(example));
        }

        /**
         * @param label The StackScript&#39;s label is for display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The StackScript&#39;s label is for display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param manyOf A list of acceptable values for the field in any quantity, combination or order.
         * 
         * @return builder
         * 
         */
        public Builder manyOf(@Nullable Output<String> manyOf) {
            $.manyOf = manyOf;
            return this;
        }

        /**
         * @param manyOf A list of acceptable values for the field in any quantity, combination or order.
         * 
         * @return builder
         * 
         */
        public Builder manyOf(String manyOf) {
            return manyOf(Output.of(manyOf));
        }

        /**
         * @param name The name of the field.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the field.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oneOf A list of acceptable single values for the field.
         * 
         * @return builder
         * 
         */
        public Builder oneOf(@Nullable Output<String> oneOf) {
            $.oneOf = oneOf;
            return this;
        }

        /**
         * @param oneOf A list of acceptable single values for the field.
         * 
         * @return builder
         * 
         */
        public Builder oneOf(String oneOf) {
            return oneOf(Output.of(oneOf));
        }

        public StackScriptUserDefinedFieldArgs build() {
            return $;
        }
    }

}
