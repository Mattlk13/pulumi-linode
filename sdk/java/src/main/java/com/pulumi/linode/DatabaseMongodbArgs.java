// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.DatabaseMongodbUpdatesArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseMongodbArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseMongodbArgs Empty = new DatabaseMongodbArgs();

    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    @Import(name="allowLists")
    private @Nullable Output<List<String>> allowLists;

    /**
     * @return A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    public Optional<Output<List<String>>> allowLists() {
        return Optional.ofNullable(this.allowLists);
    }

    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    @Import(name="clusterSize")
    private @Nullable Output<Integer> clusterSize;

    /**
     * @return The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    public Optional<Output<Integer>> clusterSize() {
        return Optional.ofNullable(this.clusterSize);
    }

    /**
     * The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
     * 
     */
    @Import(name="compressionType")
    private @Nullable Output<String> compressionType;

    /**
     * @return The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
     * 
     */
    public Optional<Output<String>> compressionType() {
        return Optional.ofNullable(this.compressionType);
    }

    /**
     * Whether the Managed Databases is encrypted. (default `false`)
     * 
     */
    @Import(name="encrypted")
    private @Nullable Output<Boolean> encrypted;

    /**
     * @return Whether the Managed Databases is encrypted. (default `false`)
     * 
     */
    public Optional<Output<Boolean>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
     * 
     */
    @Import(name="engineId", required=true)
    private Output<String> engineId;

    /**
     * @return The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
     * 
     */
    public Output<String> engineId() {
        return this.engineId;
    }

    /**
     * A unique, user-defined string referring to the Managed Database.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return A unique, user-defined string referring to the Managed Database.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The region to use for the Managed Database.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region to use for the Managed Database.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
     * 
     */
    @Import(name="sslConnection")
    private @Nullable Output<Boolean> sslConnection;

    /**
     * @return Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
     * 
     */
    public Optional<Output<Boolean>> sslConnection() {
        return Optional.ofNullable(this.sslConnection);
    }

    /**
     * The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
     * 
     */
    @Import(name="storageEngine")
    private @Nullable Output<String> storageEngine;

    /**
     * @return The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
     * 
     */
    public Optional<Output<String>> storageEngine() {
        return Optional.ofNullable(this.storageEngine);
    }

    /**
     * The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    @Import(name="updates")
    private @Nullable Output<DatabaseMongodbUpdatesArgs> updates;

    /**
     * @return Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    public Optional<Output<DatabaseMongodbUpdatesArgs>> updates() {
        return Optional.ofNullable(this.updates);
    }

    private DatabaseMongodbArgs() {}

    private DatabaseMongodbArgs(DatabaseMongodbArgs $) {
        this.allowLists = $.allowLists;
        this.clusterSize = $.clusterSize;
        this.compressionType = $.compressionType;
        this.encrypted = $.encrypted;
        this.engineId = $.engineId;
        this.label = $.label;
        this.region = $.region;
        this.sslConnection = $.sslConnection;
        this.storageEngine = $.storageEngine;
        this.type = $.type;
        this.updates = $.updates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseMongodbArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseMongodbArgs $;

        public Builder() {
            $ = new DatabaseMongodbArgs();
        }

        public Builder(DatabaseMongodbArgs defaults) {
            $ = new DatabaseMongodbArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(@Nullable Output<List<String>> allowLists) {
            $.allowLists = allowLists;
            return this;
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(List<String> allowLists) {
            return allowLists(Output.of(allowLists));
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(String... allowLists) {
            return allowLists(List.of(allowLists));
        }

        /**
         * @param clusterSize The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
         * 
         * @return builder
         * 
         */
        public Builder clusterSize(@Nullable Output<Integer> clusterSize) {
            $.clusterSize = clusterSize;
            return this;
        }

        /**
         * @param clusterSize The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
         * 
         * @return builder
         * 
         */
        public Builder clusterSize(Integer clusterSize) {
            return clusterSize(Output.of(clusterSize));
        }

        /**
         * @param compressionType The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
         * 
         * @return builder
         * 
         */
        public Builder compressionType(@Nullable Output<String> compressionType) {
            $.compressionType = compressionType;
            return this;
        }

        /**
         * @param compressionType The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
         * 
         * @return builder
         * 
         */
        public Builder compressionType(String compressionType) {
            return compressionType(Output.of(compressionType));
        }

        /**
         * @param encrypted Whether the Managed Databases is encrypted. (default `false`)
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param encrypted Whether the Managed Databases is encrypted. (default `false`)
         * 
         * @return builder
         * 
         */
        public Builder encrypted(Boolean encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param engineId The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
         * 
         * @return builder
         * 
         */
        public Builder engineId(Output<String> engineId) {
            $.engineId = engineId;
            return this;
        }

        /**
         * @param engineId The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
         * 
         * @return builder
         * 
         */
        public Builder engineId(String engineId) {
            return engineId(Output.of(engineId));
        }

        /**
         * @param label A unique, user-defined string referring to the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label A unique, user-defined string referring to the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param region The region to use for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region to use for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param sslConnection Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
         * 
         * @return builder
         * 
         */
        public Builder sslConnection(@Nullable Output<Boolean> sslConnection) {
            $.sslConnection = sslConnection;
            return this;
        }

        /**
         * @param sslConnection Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
         * 
         * @return builder
         * 
         */
        public Builder sslConnection(Boolean sslConnection) {
            return sslConnection(Output.of(sslConnection));
        }

        /**
         * @param storageEngine The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
         * 
         * @return builder
         * 
         */
        public Builder storageEngine(@Nullable Output<String> storageEngine) {
            $.storageEngine = storageEngine;
            return this;
        }

        /**
         * @param storageEngine The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
         * 
         * @return builder
         * 
         */
        public Builder storageEngine(String storageEngine) {
            return storageEngine(Output.of(storageEngine));
        }

        /**
         * @param type The Linode Instance type used for the nodes of the  Managed Database instance.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The Linode Instance type used for the nodes of the  Managed Database instance.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updates Configuration settings for automated patch update maintenance for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder updates(@Nullable Output<DatabaseMongodbUpdatesArgs> updates) {
            $.updates = updates;
            return this;
        }

        /**
         * @param updates Configuration settings for automated patch update maintenance for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder updates(DatabaseMongodbUpdatesArgs updates) {
            return updates(Output.of(updates));
        }

        public DatabaseMongodbArgs build() {
            $.engineId = Objects.requireNonNull($.engineId, "expected parameter 'engineId' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
