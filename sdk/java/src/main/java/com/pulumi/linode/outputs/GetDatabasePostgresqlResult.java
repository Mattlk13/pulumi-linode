// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.GetDatabasePostgresqlUpdate;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabasePostgresqlResult {
    private final List<String> allowLists;
    private final String caCert;
    private final Integer clusterSize;
    private final String created;
    private final Integer databaseId;
    private final Boolean encrypted;
    private final String engine;
    private final String engineId;
    private final String hostPrimary;
    private final String hostSecondary;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final String label;
    private final Integer port;
    private final String region;
    private final String replicationCommitType;
    private final String replicationType;
    private final String rootPassword;
    private final String rootUsername;
    private final Boolean sslConnection;
    private final String status;
    private final String type;
    private final String updated;
    private final List<GetDatabasePostgresqlUpdate> updates;
    private final String version;

    @CustomType.Constructor
    private GetDatabasePostgresqlResult(
        @CustomType.Parameter("allowLists") List<String> allowLists,
        @CustomType.Parameter("caCert") String caCert,
        @CustomType.Parameter("clusterSize") Integer clusterSize,
        @CustomType.Parameter("created") String created,
        @CustomType.Parameter("databaseId") Integer databaseId,
        @CustomType.Parameter("encrypted") Boolean encrypted,
        @CustomType.Parameter("engine") String engine,
        @CustomType.Parameter("engineId") String engineId,
        @CustomType.Parameter("hostPrimary") String hostPrimary,
        @CustomType.Parameter("hostSecondary") String hostSecondary,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("label") String label,
        @CustomType.Parameter("port") Integer port,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("replicationCommitType") String replicationCommitType,
        @CustomType.Parameter("replicationType") String replicationType,
        @CustomType.Parameter("rootPassword") String rootPassword,
        @CustomType.Parameter("rootUsername") String rootUsername,
        @CustomType.Parameter("sslConnection") Boolean sslConnection,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("updated") String updated,
        @CustomType.Parameter("updates") List<GetDatabasePostgresqlUpdate> updates,
        @CustomType.Parameter("version") String version) {
        this.allowLists = allowLists;
        this.caCert = caCert;
        this.clusterSize = clusterSize;
        this.created = created;
        this.databaseId = databaseId;
        this.encrypted = encrypted;
        this.engine = engine;
        this.engineId = engineId;
        this.hostPrimary = hostPrimary;
        this.hostSecondary = hostSecondary;
        this.id = id;
        this.label = label;
        this.port = port;
        this.region = region;
        this.replicationCommitType = replicationCommitType;
        this.replicationType = replicationType;
        this.rootPassword = rootPassword;
        this.rootUsername = rootUsername;
        this.sslConnection = sslConnection;
        this.status = status;
        this.type = type;
        this.updated = updated;
        this.updates = updates;
        this.version = version;
    }

    public List<String> allowLists() {
        return this.allowLists;
    }
    public String caCert() {
        return this.caCert;
    }
    public Integer clusterSize() {
        return this.clusterSize;
    }
    public String created() {
        return this.created;
    }
    public Integer databaseId() {
        return this.databaseId;
    }
    public Boolean encrypted() {
        return this.encrypted;
    }
    public String engine() {
        return this.engine;
    }
    public String engineId() {
        return this.engineId;
    }
    public String hostPrimary() {
        return this.hostPrimary;
    }
    public String hostSecondary() {
        return this.hostSecondary;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String label() {
        return this.label;
    }
    public Integer port() {
        return this.port;
    }
    public String region() {
        return this.region;
    }
    public String replicationCommitType() {
        return this.replicationCommitType;
    }
    public String replicationType() {
        return this.replicationType;
    }
    public String rootPassword() {
        return this.rootPassword;
    }
    public String rootUsername() {
        return this.rootUsername;
    }
    public Boolean sslConnection() {
        return this.sslConnection;
    }
    public String status() {
        return this.status;
    }
    public String type() {
        return this.type;
    }
    public String updated() {
        return this.updated;
    }
    public List<GetDatabasePostgresqlUpdate> updates() {
        return this.updates;
    }
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasePostgresqlResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> allowLists;
        private String caCert;
        private Integer clusterSize;
        private String created;
        private Integer databaseId;
        private Boolean encrypted;
        private String engine;
        private String engineId;
        private String hostPrimary;
        private String hostSecondary;
        private String id;
        private String label;
        private Integer port;
        private String region;
        private String replicationCommitType;
        private String replicationType;
        private String rootPassword;
        private String rootUsername;
        private Boolean sslConnection;
        private String status;
        private String type;
        private String updated;
        private List<GetDatabasePostgresqlUpdate> updates;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabasePostgresqlResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowLists = defaults.allowLists;
    	      this.caCert = defaults.caCert;
    	      this.clusterSize = defaults.clusterSize;
    	      this.created = defaults.created;
    	      this.databaseId = defaults.databaseId;
    	      this.encrypted = defaults.encrypted;
    	      this.engine = defaults.engine;
    	      this.engineId = defaults.engineId;
    	      this.hostPrimary = defaults.hostPrimary;
    	      this.hostSecondary = defaults.hostSecondary;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.port = defaults.port;
    	      this.region = defaults.region;
    	      this.replicationCommitType = defaults.replicationCommitType;
    	      this.replicationType = defaults.replicationType;
    	      this.rootPassword = defaults.rootPassword;
    	      this.rootUsername = defaults.rootUsername;
    	      this.sslConnection = defaults.sslConnection;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.updated = defaults.updated;
    	      this.updates = defaults.updates;
    	      this.version = defaults.version;
        }

        public Builder allowLists(List<String> allowLists) {
            this.allowLists = Objects.requireNonNull(allowLists);
            return this;
        }
        public Builder allowLists(String... allowLists) {
            return allowLists(List.of(allowLists));
        }
        public Builder caCert(String caCert) {
            this.caCert = Objects.requireNonNull(caCert);
            return this;
        }
        public Builder clusterSize(Integer clusterSize) {
            this.clusterSize = Objects.requireNonNull(clusterSize);
            return this;
        }
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        public Builder databaseId(Integer databaseId) {
            this.databaseId = Objects.requireNonNull(databaseId);
            return this;
        }
        public Builder encrypted(Boolean encrypted) {
            this.encrypted = Objects.requireNonNull(encrypted);
            return this;
        }
        public Builder engine(String engine) {
            this.engine = Objects.requireNonNull(engine);
            return this;
        }
        public Builder engineId(String engineId) {
            this.engineId = Objects.requireNonNull(engineId);
            return this;
        }
        public Builder hostPrimary(String hostPrimary) {
            this.hostPrimary = Objects.requireNonNull(hostPrimary);
            return this;
        }
        public Builder hostSecondary(String hostSecondary) {
            this.hostSecondary = Objects.requireNonNull(hostSecondary);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder replicationCommitType(String replicationCommitType) {
            this.replicationCommitType = Objects.requireNonNull(replicationCommitType);
            return this;
        }
        public Builder replicationType(String replicationType) {
            this.replicationType = Objects.requireNonNull(replicationType);
            return this;
        }
        public Builder rootPassword(String rootPassword) {
            this.rootPassword = Objects.requireNonNull(rootPassword);
            return this;
        }
        public Builder rootUsername(String rootUsername) {
            this.rootUsername = Objects.requireNonNull(rootUsername);
            return this;
        }
        public Builder sslConnection(Boolean sslConnection) {
            this.sslConnection = Objects.requireNonNull(sslConnection);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder updated(String updated) {
            this.updated = Objects.requireNonNull(updated);
            return this;
        }
        public Builder updates(List<GetDatabasePostgresqlUpdate> updates) {
            this.updates = Objects.requireNonNull(updates);
            return this;
        }
        public Builder updates(GetDatabasePostgresqlUpdate... updates) {
            return updates(List.of(updates));
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public GetDatabasePostgresqlResult build() {
            return new GetDatabasePostgresqlResult(allowLists, caCert, clusterSize, created, databaseId, encrypted, engine, engineId, hostPrimary, hostSecondary, id, label, port, region, replicationCommitType, replicationType, rootPassword, rootUsername, sslConnection, status, type, updated, updates, version);
        }
    }
}
