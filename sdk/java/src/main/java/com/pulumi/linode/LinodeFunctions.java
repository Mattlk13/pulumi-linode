// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.linode.Utilities;
import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
import com.pulumi.linode.inputs.GetDatabaseBackupsPlainArgs;
import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
import com.pulumi.linode.inputs.GetDatabaseEnginesPlainArgs;
import com.pulumi.linode.inputs.GetDatabaseMongodbArgs;
import com.pulumi.linode.inputs.GetDatabaseMongodbPlainArgs;
import com.pulumi.linode.inputs.GetDatabaseMysqlArgs;
import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsPlainArgs;
import com.pulumi.linode.inputs.GetDatabaseMysqlPlainArgs;
import com.pulumi.linode.inputs.GetDatabasePostgresqlArgs;
import com.pulumi.linode.inputs.GetDatabasePostgresqlPlainArgs;
import com.pulumi.linode.inputs.GetDatabasesArgs;
import com.pulumi.linode.inputs.GetDatabasesPlainArgs;
import com.pulumi.linode.inputs.GetDomainArgs;
import com.pulumi.linode.inputs.GetDomainPlainArgs;
import com.pulumi.linode.inputs.GetDomainRecordArgs;
import com.pulumi.linode.inputs.GetDomainRecordPlainArgs;
import com.pulumi.linode.inputs.GetDomainZonefileArgs;
import com.pulumi.linode.inputs.GetDomainZonefilePlainArgs;
import com.pulumi.linode.inputs.GetFirewallArgs;
import com.pulumi.linode.inputs.GetFirewallPlainArgs;
import com.pulumi.linode.inputs.GetImageArgs;
import com.pulumi.linode.inputs.GetImagePlainArgs;
import com.pulumi.linode.inputs.GetImagesArgs;
import com.pulumi.linode.inputs.GetImagesPlainArgs;
import com.pulumi.linode.inputs.GetInstanceBackupsArgs;
import com.pulumi.linode.inputs.GetInstanceBackupsPlainArgs;
import com.pulumi.linode.inputs.GetInstanceTypeArgs;
import com.pulumi.linode.inputs.GetInstanceTypePlainArgs;
import com.pulumi.linode.inputs.GetInstanceTypesArgs;
import com.pulumi.linode.inputs.GetInstanceTypesPlainArgs;
import com.pulumi.linode.inputs.GetInstancesArgs;
import com.pulumi.linode.inputs.GetInstancesPlainArgs;
import com.pulumi.linode.inputs.GetIpv6RangeArgs;
import com.pulumi.linode.inputs.GetIpv6RangePlainArgs;
import com.pulumi.linode.inputs.GetKernelArgs;
import com.pulumi.linode.inputs.GetKernelPlainArgs;
import com.pulumi.linode.inputs.GetLkeClusterArgs;
import com.pulumi.linode.inputs.GetLkeClusterPlainArgs;
import com.pulumi.linode.inputs.GetNetworkingIpArgs;
import com.pulumi.linode.inputs.GetNetworkingIpPlainArgs;
import com.pulumi.linode.inputs.GetNodeBalancerArgs;
import com.pulumi.linode.inputs.GetNodeBalancerConfigArgs;
import com.pulumi.linode.inputs.GetNodeBalancerConfigPlainArgs;
import com.pulumi.linode.inputs.GetNodeBalancerNodeArgs;
import com.pulumi.linode.inputs.GetNodeBalancerNodePlainArgs;
import com.pulumi.linode.inputs.GetNodeBalancerPlainArgs;
import com.pulumi.linode.inputs.GetObjectStorageClusterArgs;
import com.pulumi.linode.inputs.GetObjectStorageClusterPlainArgs;
import com.pulumi.linode.inputs.GetRegionArgs;
import com.pulumi.linode.inputs.GetRegionPlainArgs;
import com.pulumi.linode.inputs.GetSshKeyArgs;
import com.pulumi.linode.inputs.GetSshKeyPlainArgs;
import com.pulumi.linode.inputs.GetStackScriptArgs;
import com.pulumi.linode.inputs.GetStackScriptPlainArgs;
import com.pulumi.linode.inputs.GetStackScriptsArgs;
import com.pulumi.linode.inputs.GetStackScriptsPlainArgs;
import com.pulumi.linode.inputs.GetUserArgs;
import com.pulumi.linode.inputs.GetUserPlainArgs;
import com.pulumi.linode.inputs.GetVlansArgs;
import com.pulumi.linode.inputs.GetVlansPlainArgs;
import com.pulumi.linode.inputs.GetVolumeArgs;
import com.pulumi.linode.inputs.GetVolumePlainArgs;
import com.pulumi.linode.outputs.GetAccountResult;
import com.pulumi.linode.outputs.GetDatabaseBackupsResult;
import com.pulumi.linode.outputs.GetDatabaseEnginesResult;
import com.pulumi.linode.outputs.GetDatabaseMongodbResult;
import com.pulumi.linode.outputs.GetDatabaseMysqlBackupsResult;
import com.pulumi.linode.outputs.GetDatabaseMysqlResult;
import com.pulumi.linode.outputs.GetDatabasePostgresqlResult;
import com.pulumi.linode.outputs.GetDatabasesResult;
import com.pulumi.linode.outputs.GetDomainRecordResult;
import com.pulumi.linode.outputs.GetDomainResult;
import com.pulumi.linode.outputs.GetDomainZonefileResult;
import com.pulumi.linode.outputs.GetFirewallResult;
import com.pulumi.linode.outputs.GetImageResult;
import com.pulumi.linode.outputs.GetImagesResult;
import com.pulumi.linode.outputs.GetInstanceBackupsResult;
import com.pulumi.linode.outputs.GetInstanceTypeResult;
import com.pulumi.linode.outputs.GetInstanceTypesResult;
import com.pulumi.linode.outputs.GetInstancesResult;
import com.pulumi.linode.outputs.GetIpv6RangeResult;
import com.pulumi.linode.outputs.GetKernelResult;
import com.pulumi.linode.outputs.GetLkeClusterResult;
import com.pulumi.linode.outputs.GetNetworkingIpResult;
import com.pulumi.linode.outputs.GetNodeBalancerConfigResult;
import com.pulumi.linode.outputs.GetNodeBalancerNodeResult;
import com.pulumi.linode.outputs.GetNodeBalancerResult;
import com.pulumi.linode.outputs.GetObjectStorageClusterResult;
import com.pulumi.linode.outputs.GetProfileResult;
import com.pulumi.linode.outputs.GetRegionResult;
import com.pulumi.linode.outputs.GetSshKeyResult;
import com.pulumi.linode.outputs.GetStackScriptResult;
import com.pulumi.linode.outputs.GetStackScriptsResult;
import com.pulumi.linode.outputs.GetUserResult;
import com.pulumi.linode.outputs.GetVlansResult;
import com.pulumi.linode.outputs.GetVolumeResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class LinodeFunctions {
    /**
     * Provides information about a Linode account.
     * 
     * This data source should not be used in conjuction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Account resource exports the following attributes:
     * 
     * * `email` - The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     * * `first_name` - The first name of the person associated with this Account.
     * 
     * * `last_name` - The last name of the person associated with this Account.
     * 
     * * `company` - The company name associated with this Account.
     * 
     * * `address_1` - First line of this Account&#39;s billing address.
     * 
     * * `address_2` - Second line of this Account&#39;s billing address.
     * 
     * * `phone` - The phone number associated with this Account.
     * 
     * * `city` - The city for this Account&#39;s billing address.
     * 
     * * `state` - If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     * * `country` - The two-letter country code of this Account&#39;s billing address.
     * 
     * * `zip` - The zip code of this Account&#39;s billing address.
     * 
     * * `balance` - This Account&#39;s balance, in US dollars.
     * 
     */
    public static Output<GetAccountResult> getAccount() {
        return getAccount(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode account.
     * 
     * This data source should not be used in conjuction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Account resource exports the following attributes:
     * 
     * * `email` - The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     * * `first_name` - The first name of the person associated with this Account.
     * 
     * * `last_name` - The last name of the person associated with this Account.
     * 
     * * `company` - The company name associated with this Account.
     * 
     * * `address_1` - First line of this Account&#39;s billing address.
     * 
     * * `address_2` - Second line of this Account&#39;s billing address.
     * 
     * * `phone` - The phone number associated with this Account.
     * 
     * * `city` - The city for this Account&#39;s billing address.
     * 
     * * `state` - If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     * * `country` - The two-letter country code of this Account&#39;s billing address.
     * 
     * * `zip` - The zip code of this Account&#39;s billing address.
     * 
     * * `balance` - This Account&#39;s balance, in US dollars.
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain() {
        return getAccountPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode account.
     * 
     * This data source should not be used in conjuction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Account resource exports the following attributes:
     * 
     * * `email` - The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     * * `first_name` - The first name of the person associated with this Account.
     * 
     * * `last_name` - The last name of the person associated with this Account.
     * 
     * * `company` - The company name associated with this Account.
     * 
     * * `address_1` - First line of this Account&#39;s billing address.
     * 
     * * `address_2` - Second line of this Account&#39;s billing address.
     * 
     * * `phone` - The phone number associated with this Account.
     * 
     * * `city` - The city for this Account&#39;s billing address.
     * 
     * * `state` - If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     * * `country` - The two-letter country code of this Account&#39;s billing address.
     * 
     * * `zip` - The zip code of this Account&#39;s billing address.
     * 
     * * `balance` - This Account&#39;s balance, in US dollars.
     * 
     */
    public static Output<GetAccountResult> getAccount(InvokeArgs args) {
        return getAccount(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode account.
     * 
     * This data source should not be used in conjuction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Account resource exports the following attributes:
     * 
     * * `email` - The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     * * `first_name` - The first name of the person associated with this Account.
     * 
     * * `last_name` - The last name of the person associated with this Account.
     * 
     * * `company` - The company name associated with this Account.
     * 
     * * `address_1` - First line of this Account&#39;s billing address.
     * 
     * * `address_2` - Second line of this Account&#39;s billing address.
     * 
     * * `phone` - The phone number associated with this Account.
     * 
     * * `city` - The city for this Account&#39;s billing address.
     * 
     * * `state` - If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     * * `country` - The two-letter country code of this Account&#39;s billing address.
     * 
     * * `zip` - The zip code of this Account&#39;s billing address.
     * 
     * * `balance` - This Account&#39;s balance, in US dollars.
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(InvokeArgs args) {
        return getAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode account.
     * 
     * This data source should not be used in conjuction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Account resource exports the following attributes:
     * 
     * * `email` - The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     * * `first_name` - The first name of the person associated with this Account.
     * 
     * * `last_name` - The last name of the person associated with this Account.
     * 
     * * `company` - The company name associated with this Account.
     * 
     * * `address_1` - First line of this Account&#39;s billing address.
     * 
     * * `address_2` - Second line of this Account&#39;s billing address.
     * 
     * * `phone` - The phone number associated with this Account.
     * 
     * * `city` - The city for this Account&#39;s billing address.
     * 
     * * `state` - If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     * * `country` - The two-letter country code of this Account&#39;s billing address.
     * 
     * * `zip` - The zip code of this Account&#39;s billing address.
     * 
     * * `balance` - This Account&#39;s balance, in US dollars.
     * 
     */
    public static Output<GetAccountResult> getAccount(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode account.
     * 
     * This data source should not be used in conjuction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Account resource exports the following attributes:
     * 
     * * `email` - The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     * * `first_name` - The first name of the person associated with this Account.
     * 
     * * `last_name` - The last name of the person associated with this Account.
     * 
     * * `company` - The company name associated with this Account.
     * 
     * * `address_1` - First line of this Account&#39;s billing address.
     * 
     * * `address_2` - Second line of this Account&#39;s billing address.
     * 
     * * `phone` - The phone number associated with this Account.
     * 
     * * `city` - The city for this Account&#39;s billing address.
     * 
     * * `state` - If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     * * `country` - The two-letter country code of this Account&#39;s billing address.
     * 
     * * `zip` - The zip code of this Account&#39;s billing address.
     * 
     * * `balance` - This Account&#39;s balance, in US dollars.
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode Database Backups that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all backups for a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()
     *             .databaseId(12345)
     *             .databaseType(&#34;mysql&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all automatic MongoDB Database Backups:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var auto-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()
     *             .databaseId(12345)
     *             .databaseType(&#34;mongodb&#34;)
     *             .filters(GetDatabaseBackupsFilterArgs.builder()
     *                 .name(&#34;type&#34;)
     *                 .values(&#34;auto&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each backup will be stored in the `backups` attribute and will export the following attributes:
     * 
     * * `created` - A time value given in a combined date and time format that represents when the database backup was created.
     * 
     * * `id` - The ID of the database backup object.
     * 
     * * `label` - The database backup’s label, for display purposes only.
     * 
     * * `type` - The type of database backup, determined by how the backup was created.
     * 
     */
    public static Output<GetDatabaseBackupsResult> getDatabaseBackups(GetDatabaseBackupsArgs args) {
        return getDatabaseBackups(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Database Backups that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all backups for a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()
     *             .databaseId(12345)
     *             .databaseType(&#34;mysql&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all automatic MongoDB Database Backups:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var auto-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()
     *             .databaseId(12345)
     *             .databaseType(&#34;mongodb&#34;)
     *             .filters(GetDatabaseBackupsFilterArgs.builder()
     *                 .name(&#34;type&#34;)
     *                 .values(&#34;auto&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each backup will be stored in the `backups` attribute and will export the following attributes:
     * 
     * * `created` - A time value given in a combined date and time format that represents when the database backup was created.
     * 
     * * `id` - The ID of the database backup object.
     * 
     * * `label` - The database backup’s label, for display purposes only.
     * 
     * * `type` - The type of database backup, determined by how the backup was created.
     * 
     */
    public static CompletableFuture<GetDatabaseBackupsResult> getDatabaseBackupsPlain(GetDatabaseBackupsPlainArgs args) {
        return getDatabaseBackupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Database Backups that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all backups for a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()
     *             .databaseId(12345)
     *             .databaseType(&#34;mysql&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all automatic MongoDB Database Backups:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var auto-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()
     *             .databaseId(12345)
     *             .databaseType(&#34;mongodb&#34;)
     *             .filters(GetDatabaseBackupsFilterArgs.builder()
     *                 .name(&#34;type&#34;)
     *                 .values(&#34;auto&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each backup will be stored in the `backups` attribute and will export the following attributes:
     * 
     * * `created` - A time value given in a combined date and time format that represents when the database backup was created.
     * 
     * * `id` - The ID of the database backup object.
     * 
     * * `label` - The database backup’s label, for display purposes only.
     * 
     * * `type` - The type of database backup, determined by how the backup was created.
     * 
     */
    public static Output<GetDatabaseBackupsResult> getDatabaseBackups(GetDatabaseBackupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDatabaseBackups:getDatabaseBackups", TypeShape.of(GetDatabaseBackupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode Database Backups that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all backups for a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()
     *             .databaseId(12345)
     *             .databaseType(&#34;mysql&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all automatic MongoDB Database Backups:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var auto-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()
     *             .databaseId(12345)
     *             .databaseType(&#34;mongodb&#34;)
     *             .filters(GetDatabaseBackupsFilterArgs.builder()
     *                 .name(&#34;type&#34;)
     *                 .values(&#34;auto&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each backup will be stored in the `backups` attribute and will export the following attributes:
     * 
     * * `created` - A time value given in a combined date and time format that represents when the database backup was created.
     * 
     * * `id` - The ID of the database backup object.
     * 
     * * `label` - The database backup’s label, for display purposes only.
     * 
     * * `type` - The type of database backup, determined by how the backup was created.
     * 
     */
    public static CompletableFuture<GetDatabaseBackupsResult> getDatabaseBackupsPlain(GetDatabaseBackupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDatabaseBackups:getDatabaseBackups", TypeShape.of(GetDatabaseBackupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode Managed Database engines that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabaseEngines();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create a Linode MySQL Database using the latest support MySQL version:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import com.pulumi.linode.DatabaseMysql;
     * import com.pulumi.linode.DatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .latest(true)
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *         var myDb = new DatabaseMysql(&#34;myDb&#34;, DatabaseMysqlArgs.builder()        
     *             .label(&#34;mydb&#34;)
     *             .engineId(mysql.applyValue(getDatabaseEnginesResult -&gt; getDatabaseEnginesResult.engines()[0].id()))
     *             .region(&#34;us-southeast&#34;)
     *             .type(&#34;g6-nanode-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `engines` attribute and will export the following attributes:
     * 
     * * `engine` - The Managed Database engine type.
     * 
     * * `id` - The Managed Database engine ID in engine/version format.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static Output<GetDatabaseEnginesResult> getDatabaseEngines() {
        return getDatabaseEngines(GetDatabaseEnginesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Managed Database engines that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabaseEngines();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create a Linode MySQL Database using the latest support MySQL version:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import com.pulumi.linode.DatabaseMysql;
     * import com.pulumi.linode.DatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .latest(true)
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *         var myDb = new DatabaseMysql(&#34;myDb&#34;, DatabaseMysqlArgs.builder()        
     *             .label(&#34;mydb&#34;)
     *             .engineId(mysql.applyValue(getDatabaseEnginesResult -&gt; getDatabaseEnginesResult.engines()[0].id()))
     *             .region(&#34;us-southeast&#34;)
     *             .type(&#34;g6-nanode-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `engines` attribute and will export the following attributes:
     * 
     * * `engine` - The Managed Database engine type.
     * 
     * * `id` - The Managed Database engine ID in engine/version format.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static CompletableFuture<GetDatabaseEnginesResult> getDatabaseEnginesPlain() {
        return getDatabaseEnginesPlain(GetDatabaseEnginesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Managed Database engines that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabaseEngines();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create a Linode MySQL Database using the latest support MySQL version:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import com.pulumi.linode.DatabaseMysql;
     * import com.pulumi.linode.DatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .latest(true)
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *         var myDb = new DatabaseMysql(&#34;myDb&#34;, DatabaseMysqlArgs.builder()        
     *             .label(&#34;mydb&#34;)
     *             .engineId(mysql.applyValue(getDatabaseEnginesResult -&gt; getDatabaseEnginesResult.engines()[0].id()))
     *             .region(&#34;us-southeast&#34;)
     *             .type(&#34;g6-nanode-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `engines` attribute and will export the following attributes:
     * 
     * * `engine` - The Managed Database engine type.
     * 
     * * `id` - The Managed Database engine ID in engine/version format.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static Output<GetDatabaseEnginesResult> getDatabaseEngines(GetDatabaseEnginesArgs args) {
        return getDatabaseEngines(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Managed Database engines that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabaseEngines();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create a Linode MySQL Database using the latest support MySQL version:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import com.pulumi.linode.DatabaseMysql;
     * import com.pulumi.linode.DatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .latest(true)
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *         var myDb = new DatabaseMysql(&#34;myDb&#34;, DatabaseMysqlArgs.builder()        
     *             .label(&#34;mydb&#34;)
     *             .engineId(mysql.applyValue(getDatabaseEnginesResult -&gt; getDatabaseEnginesResult.engines()[0].id()))
     *             .region(&#34;us-southeast&#34;)
     *             .type(&#34;g6-nanode-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `engines` attribute and will export the following attributes:
     * 
     * * `engine` - The Managed Database engine type.
     * 
     * * `id` - The Managed Database engine ID in engine/version format.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static CompletableFuture<GetDatabaseEnginesResult> getDatabaseEnginesPlain(GetDatabaseEnginesPlainArgs args) {
        return getDatabaseEnginesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Managed Database engines that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabaseEngines();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create a Linode MySQL Database using the latest support MySQL version:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import com.pulumi.linode.DatabaseMysql;
     * import com.pulumi.linode.DatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .latest(true)
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *         var myDb = new DatabaseMysql(&#34;myDb&#34;, DatabaseMysqlArgs.builder()        
     *             .label(&#34;mydb&#34;)
     *             .engineId(mysql.applyValue(getDatabaseEnginesResult -&gt; getDatabaseEnginesResult.engines()[0].id()))
     *             .region(&#34;us-southeast&#34;)
     *             .type(&#34;g6-nanode-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `engines` attribute and will export the following attributes:
     * 
     * * `engine` - The Managed Database engine type.
     * 
     * * `id` - The Managed Database engine ID in engine/version format.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static Output<GetDatabaseEnginesResult> getDatabaseEngines(GetDatabaseEnginesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDatabaseEngines:getDatabaseEngines", TypeShape.of(GetDatabaseEnginesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode Managed Database engines that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabaseEngines();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Database engines:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create a Linode MySQL Database using the latest support MySQL version:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseEnginesArgs;
     * import com.pulumi.linode.DatabaseMysql;
     * import com.pulumi.linode.DatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()
     *             .latest(true)
     *             .filters(GetDatabaseEnginesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *         var myDb = new DatabaseMysql(&#34;myDb&#34;, DatabaseMysqlArgs.builder()        
     *             .label(&#34;mydb&#34;)
     *             .engineId(mysql.applyValue(getDatabaseEnginesResult -&gt; getDatabaseEnginesResult.engines()[0].id()))
     *             .region(&#34;us-southeast&#34;)
     *             .type(&#34;g6-nanode-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `engines` attribute and will export the following attributes:
     * 
     * * `engine` - The Managed Database engine type.
     * 
     * * `id` - The Managed Database engine ID in engine/version format.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static CompletableFuture<GetDatabaseEnginesResult> getDatabaseEnginesPlain(GetDatabaseEnginesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDatabaseEngines:getDatabaseEngines", TypeShape.of(GetDatabaseEnginesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode MongoDB Database.
     * 
     * ## Example Usage
     * 
     * Get information about a MongoDB database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMongodbArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabaseMongodb(GetDatabaseMongodbArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabaseMongodb` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `compression_type` - The type of data compression for this Database. (`none`, `snappy`, `zlib`)
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `mongodb`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mongodb/4.4.10`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `peers` - A set of peer addresses for this Database.
     * 
     * * `port` - The access port for this Managed Database.
     * 
     * * `replica_set` - Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `storage_engine` - The type of storage engine for this Database. (`mmapv1`, `wiredtiger`)
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static Output<GetDatabaseMongodbResult> getDatabaseMongodb(GetDatabaseMongodbArgs args) {
        return getDatabaseMongodb(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode MongoDB Database.
     * 
     * ## Example Usage
     * 
     * Get information about a MongoDB database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMongodbArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabaseMongodb(GetDatabaseMongodbArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabaseMongodb` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `compression_type` - The type of data compression for this Database. (`none`, `snappy`, `zlib`)
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `mongodb`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mongodb/4.4.10`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `peers` - A set of peer addresses for this Database.
     * 
     * * `port` - The access port for this Managed Database.
     * 
     * * `replica_set` - Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `storage_engine` - The type of storage engine for this Database. (`mmapv1`, `wiredtiger`)
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static CompletableFuture<GetDatabaseMongodbResult> getDatabaseMongodbPlain(GetDatabaseMongodbPlainArgs args) {
        return getDatabaseMongodbPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode MongoDB Database.
     * 
     * ## Example Usage
     * 
     * Get information about a MongoDB database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMongodbArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabaseMongodb(GetDatabaseMongodbArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabaseMongodb` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `compression_type` - The type of data compression for this Database. (`none`, `snappy`, `zlib`)
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `mongodb`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mongodb/4.4.10`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `peers` - A set of peer addresses for this Database.
     * 
     * * `port` - The access port for this Managed Database.
     * 
     * * `replica_set` - Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `storage_engine` - The type of storage engine for this Database. (`mmapv1`, `wiredtiger`)
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static Output<GetDatabaseMongodbResult> getDatabaseMongodb(GetDatabaseMongodbArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDatabaseMongodb:getDatabaseMongodb", TypeShape.of(GetDatabaseMongodbResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode MongoDB Database.
     * 
     * ## Example Usage
     * 
     * Get information about a MongoDB database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMongodbArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabaseMongodb(GetDatabaseMongodbArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabaseMongodb` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `compression_type` - The type of data compression for this Database. (`none`, `snappy`, `zlib`)
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `mongodb`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mongodb/4.4.10`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `peers` - A set of peer addresses for this Database.
     * 
     * * `port` - The access port for this Managed Database.
     * 
     * * `replica_set` - Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `storage_engine` - The type of storage engine for this Database. (`mmapv1`, `wiredtiger`)
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static CompletableFuture<GetDatabaseMongodbResult> getDatabaseMongodbPlain(GetDatabaseMongodbPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDatabaseMongodb:getDatabaseMongodb", TypeShape.of(GetDatabaseMongodbResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode MySQL Database.
     * 
     * ## Example Usage
     * 
     * Get information about a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabaseMysql(GetDatabaseMysqlArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabaseMysql` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `mysql`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static Output<GetDatabaseMysqlResult> getDatabaseMysql(GetDatabaseMysqlArgs args) {
        return getDatabaseMysql(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode MySQL Database.
     * 
     * ## Example Usage
     * 
     * Get information about a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabaseMysql(GetDatabaseMysqlArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabaseMysql` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `mysql`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static CompletableFuture<GetDatabaseMysqlResult> getDatabaseMysqlPlain(GetDatabaseMysqlPlainArgs args) {
        return getDatabaseMysqlPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode MySQL Database.
     * 
     * ## Example Usage
     * 
     * Get information about a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabaseMysql(GetDatabaseMysqlArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabaseMysql` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `mysql`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static Output<GetDatabaseMysqlResult> getDatabaseMysql(GetDatabaseMysqlArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDatabaseMysql:getDatabaseMysql", TypeShape.of(GetDatabaseMysqlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode MySQL Database.
     * 
     * ## Example Usage
     * 
     * Get information about a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabaseMysql(GetDatabaseMysqlArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabaseMysql` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `mysql`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static CompletableFuture<GetDatabaseMysqlResult> getDatabaseMysqlPlain(GetDatabaseMysqlPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDatabaseMysql:getDatabaseMysql", TypeShape.of(GetDatabaseMysqlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **NOTICE:** This data source has been deprecated in favor of `linode.getDatabaseBackups`.
     * 
     * Provides information about Linode MySQL Database Backups that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all backups for a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all automatic MySQL Database Backups:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var auto-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()
     *             .databaseId(12345)
     *             .filters(GetDatabaseMysqlBackupsFilterArgs.builder()
     *                 .name(&#34;type&#34;)
     *                 .values(&#34;auto&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each backup will be stored in the `backups` attribute and will export the following attributes:
     * 
     * * `created` - A time value given in a combined date and time format that represents when the database backup was created.
     * 
     * * `id` - The ID of the database backup object.
     * 
     * * `label` - The database backup’s label, for display purposes only.
     * 
     * * `type` - The type of database backup, determined by how the backup was created.
     * 
     */
    public static Output<GetDatabaseMysqlBackupsResult> getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs args) {
        return getDatabaseMysqlBackups(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **NOTICE:** This data source has been deprecated in favor of `linode.getDatabaseBackups`.
     * 
     * Provides information about Linode MySQL Database Backups that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all backups for a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all automatic MySQL Database Backups:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var auto-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()
     *             .databaseId(12345)
     *             .filters(GetDatabaseMysqlBackupsFilterArgs.builder()
     *                 .name(&#34;type&#34;)
     *                 .values(&#34;auto&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each backup will be stored in the `backups` attribute and will export the following attributes:
     * 
     * * `created` - A time value given in a combined date and time format that represents when the database backup was created.
     * 
     * * `id` - The ID of the database backup object.
     * 
     * * `label` - The database backup’s label, for display purposes only.
     * 
     * * `type` - The type of database backup, determined by how the backup was created.
     * 
     */
    public static CompletableFuture<GetDatabaseMysqlBackupsResult> getDatabaseMysqlBackupsPlain(GetDatabaseMysqlBackupsPlainArgs args) {
        return getDatabaseMysqlBackupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **NOTICE:** This data source has been deprecated in favor of `linode.getDatabaseBackups`.
     * 
     * Provides information about Linode MySQL Database Backups that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all backups for a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all automatic MySQL Database Backups:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var auto-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()
     *             .databaseId(12345)
     *             .filters(GetDatabaseMysqlBackupsFilterArgs.builder()
     *                 .name(&#34;type&#34;)
     *                 .values(&#34;auto&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each backup will be stored in the `backups` attribute and will export the following attributes:
     * 
     * * `created` - A time value given in a combined date and time format that represents when the database backup was created.
     * 
     * * `id` - The ID of the database backup object.
     * 
     * * `label` - The database backup’s label, for display purposes only.
     * 
     * * `type` - The type of database backup, determined by how the backup was created.
     * 
     */
    public static Output<GetDatabaseMysqlBackupsResult> getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDatabaseMysqlBackups:getDatabaseMysqlBackups", TypeShape.of(GetDatabaseMysqlBackupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **NOTICE:** This data source has been deprecated in favor of `linode.getDatabaseBackups`.
     * 
     * Provides information about Linode MySQL Database Backups that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all backups for a MySQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all automatic MySQL Database Backups:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var auto-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()
     *             .databaseId(12345)
     *             .filters(GetDatabaseMysqlBackupsFilterArgs.builder()
     *                 .name(&#34;type&#34;)
     *                 .values(&#34;auto&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each backup will be stored in the `backups` attribute and will export the following attributes:
     * 
     * * `created` - A time value given in a combined date and time format that represents when the database backup was created.
     * 
     * * `id` - The ID of the database backup object.
     * 
     * * `label` - The database backup’s label, for display purposes only.
     * 
     * * `type` - The type of database backup, determined by how the backup was created.
     * 
     */
    public static CompletableFuture<GetDatabaseMysqlBackupsResult> getDatabaseMysqlBackupsPlain(GetDatabaseMysqlBackupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDatabaseMysqlBackups:getDatabaseMysqlBackups", TypeShape.of(GetDatabaseMysqlBackupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode PostgreSQL Database.
     * 
     * ## Example Usage
     * 
     * Get information about a PostgreSQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasePostgresqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabasePostgresql(GetDatabasePostgresqlArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabasePostgresql` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `postgresql`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
     * 
     * * `replication_commit_type` - (Optional) The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`)
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static Output<GetDatabasePostgresqlResult> getDatabasePostgresql(GetDatabasePostgresqlArgs args) {
        return getDatabasePostgresql(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode PostgreSQL Database.
     * 
     * ## Example Usage
     * 
     * Get information about a PostgreSQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasePostgresqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabasePostgresql(GetDatabasePostgresqlArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabasePostgresql` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `postgresql`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
     * 
     * * `replication_commit_type` - (Optional) The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`)
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static CompletableFuture<GetDatabasePostgresqlResult> getDatabasePostgresqlPlain(GetDatabasePostgresqlPlainArgs args) {
        return getDatabasePostgresqlPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode PostgreSQL Database.
     * 
     * ## Example Usage
     * 
     * Get information about a PostgreSQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasePostgresqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabasePostgresql(GetDatabasePostgresqlArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabasePostgresql` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `postgresql`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
     * 
     * * `replication_commit_type` - (Optional) The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`)
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static Output<GetDatabasePostgresqlResult> getDatabasePostgresql(GetDatabasePostgresqlArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDatabasePostgresql:getDatabasePostgresql", TypeShape.of(GetDatabasePostgresqlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode PostgreSQL Database.
     * 
     * ## Example Usage
     * 
     * Get information about a PostgreSQL database:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasePostgresqlArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-db = LinodeFunctions.getDatabasePostgresql(GetDatabasePostgresqlArgs.builder()
     *             .databaseId(12345)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.DatabasePostgresql` data source exports the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     * * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine. (e.g. `postgresql`)
     * 
     * * `engine_id` - The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region that hosts this Linode Managed Database.
     * 
     * * `root_password` - The randomly-generated root password for the Managed Database instance.
     * 
     * * `root_username` - The root username for the Managed Database instance.
     * 
     * * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
     * 
     * * `replication_commit_type` - (Optional) The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`)
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     * * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     * ## updates
     * 
     * The following arguments are exported by the `updates` specification block:
     * 
     * * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
     * 
     * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
     * 
     * * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
     * 
     * * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
     * 
     * * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
     * 
     */
    public static CompletableFuture<GetDatabasePostgresqlResult> getDatabasePostgresqlPlain(GetDatabasePostgresqlPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDatabasePostgresql:getDatabasePostgresql", TypeShape.of(GetDatabasePostgresqlResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode Managed Databases that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabases();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()
     *             .filters(GetDatabasesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `databases` attribute and will export the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine.
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `id` - The ID of the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region to use for the Managed Database.
     * 
     * * `replication_type` - The replication method used for the Managed Database.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static Output<GetDatabasesResult> getDatabases() {
        return getDatabases(GetDatabasesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Managed Databases that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabases();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()
     *             .filters(GetDatabasesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `databases` attribute and will export the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine.
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `id` - The ID of the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region to use for the Managed Database.
     * 
     * * `replication_type` - The replication method used for the Managed Database.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static CompletableFuture<GetDatabasesResult> getDatabasesPlain() {
        return getDatabasesPlain(GetDatabasesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Managed Databases that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabases();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()
     *             .filters(GetDatabasesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `databases` attribute and will export the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine.
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `id` - The ID of the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region to use for the Managed Database.
     * 
     * * `replication_type` - The replication method used for the Managed Database.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static Output<GetDatabasesResult> getDatabases(GetDatabasesArgs args) {
        return getDatabases(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Managed Databases that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabases();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()
     *             .filters(GetDatabasesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `databases` attribute and will export the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine.
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `id` - The ID of the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region to use for the Managed Database.
     * 
     * * `replication_type` - The replication method used for the Managed Database.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static CompletableFuture<GetDatabasesResult> getDatabasesPlain(GetDatabasesPlainArgs args) {
        return getDatabasesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Managed Databases that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabases();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()
     *             .filters(GetDatabasesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `databases` attribute and will export the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine.
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `id` - The ID of the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region to use for the Managed Database.
     * 
     * * `replication_type` - The replication method used for the Managed Database.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static Output<GetDatabasesResult> getDatabases(GetDatabasesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDatabases:getDatabases", TypeShape.of(GetDatabasesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode Managed Databases that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Managed Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = LinodeFunctions.getDatabases();
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode MySQL Databases:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDatabasesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var mysql = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()
     *             .filters(GetDatabasesFilterArgs.builder()
     *                 .name(&#34;engine&#34;)
     *                 .values(&#34;mysql&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each engine will be stored in the `databases` attribute and will export the following attributes:
     * 
     * * `allow_list` - A list of IP addresses that can access the Managed Database.
     * 
     * * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
     * 
     * * `created` - When this Managed Database was created.
     * 
     * * `encrypted` - Whether the Managed Databases is encrypted.
     * 
     * * `engine` - The Managed Database engine.
     * 
     * * `host_primary` - The primary host for the Managed Database.
     * 
     * * `host_secondary` - The secondary/private network host for the Managed Database.
     * 
     * * `id` - The ID of the Managed Database.
     * 
     * * `label` - A unique, user-defined string referring to the Managed Database.
     * 
     * * `region` - The region to use for the Managed Database.
     * 
     * * `replication_type` - The replication method used for the Managed Database.
     * 
     * * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     * * `status` - The operating status of the Managed Database.
     * 
     * * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     * * `updated` - When this Managed Database was last updated.
     * 
     * * `version` - The Managed Database engine version.
     * 
     */
    public static CompletableFuture<GetDatabasesResult> getDatabasesPlain(GetDatabasesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDatabases:getDatabases", TypeShape.of(GetDatabasesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode domain.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode domain.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *         final var bar = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .domain(&#34;bar.example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Domain resource exports the following attributes:
     * 
     * * `id` - The unique ID of this Domain.
     * 
     * * `domain` - The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     * * `type` - If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     * * `group` - The group this Domain belongs to.
     * 
     * * `status` - Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     * * `description` - A description for this Domain.
     * 
     * * `master_ips` - The IP addresses representing the master DNS for this Domain.
     * 
     * * `axfr_ips` - The list of IPs that may perform a zone transfer for this Domain.
     * 
     * * `ttl_sec` - &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * * `retry_sec` - The interval, in seconds, at which a failed refresh should be retried.
     * 
     * * `expire_sec` - The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     * * `refresh_sec` - The amount of time in seconds before this Domain should be refreshed.
     * 
     * * `soa_email` - Start of Authority email address.
     * 
     * * `tags` - An array of tags applied to this object.
     * 
     */
    public static Output<GetDomainResult> getDomain() {
        return getDomain(GetDomainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode domain.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode domain.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *         final var bar = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .domain(&#34;bar.example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Domain resource exports the following attributes:
     * 
     * * `id` - The unique ID of this Domain.
     * 
     * * `domain` - The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     * * `type` - If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     * * `group` - The group this Domain belongs to.
     * 
     * * `status` - Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     * * `description` - A description for this Domain.
     * 
     * * `master_ips` - The IP addresses representing the master DNS for this Domain.
     * 
     * * `axfr_ips` - The list of IPs that may perform a zone transfer for this Domain.
     * 
     * * `ttl_sec` - &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * * `retry_sec` - The interval, in seconds, at which a failed refresh should be retried.
     * 
     * * `expire_sec` - The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     * * `refresh_sec` - The amount of time in seconds before this Domain should be refreshed.
     * 
     * * `soa_email` - Start of Authority email address.
     * 
     * * `tags` - An array of tags applied to this object.
     * 
     */
    public static CompletableFuture<GetDomainResult> getDomainPlain() {
        return getDomainPlain(GetDomainPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode domain.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode domain.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *         final var bar = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .domain(&#34;bar.example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Domain resource exports the following attributes:
     * 
     * * `id` - The unique ID of this Domain.
     * 
     * * `domain` - The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     * * `type` - If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     * * `group` - The group this Domain belongs to.
     * 
     * * `status` - Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     * * `description` - A description for this Domain.
     * 
     * * `master_ips` - The IP addresses representing the master DNS for this Domain.
     * 
     * * `axfr_ips` - The list of IPs that may perform a zone transfer for this Domain.
     * 
     * * `ttl_sec` - &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * * `retry_sec` - The interval, in seconds, at which a failed refresh should be retried.
     * 
     * * `expire_sec` - The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     * * `refresh_sec` - The amount of time in seconds before this Domain should be refreshed.
     * 
     * * `soa_email` - Start of Authority email address.
     * 
     * * `tags` - An array of tags applied to this object.
     * 
     */
    public static Output<GetDomainResult> getDomain(GetDomainArgs args) {
        return getDomain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode domain.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode domain.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *         final var bar = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .domain(&#34;bar.example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Domain resource exports the following attributes:
     * 
     * * `id` - The unique ID of this Domain.
     * 
     * * `domain` - The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     * * `type` - If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     * * `group` - The group this Domain belongs to.
     * 
     * * `status` - Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     * * `description` - A description for this Domain.
     * 
     * * `master_ips` - The IP addresses representing the master DNS for this Domain.
     * 
     * * `axfr_ips` - The list of IPs that may perform a zone transfer for this Domain.
     * 
     * * `ttl_sec` - &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * * `retry_sec` - The interval, in seconds, at which a failed refresh should be retried.
     * 
     * * `expire_sec` - The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     * * `refresh_sec` - The amount of time in seconds before this Domain should be refreshed.
     * 
     * * `soa_email` - Start of Authority email address.
     * 
     * * `tags` - An array of tags applied to this object.
     * 
     */
    public static CompletableFuture<GetDomainResult> getDomainPlain(GetDomainPlainArgs args) {
        return getDomainPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode domain.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode domain.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *         final var bar = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .domain(&#34;bar.example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Domain resource exports the following attributes:
     * 
     * * `id` - The unique ID of this Domain.
     * 
     * * `domain` - The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     * * `type` - If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     * * `group` - The group this Domain belongs to.
     * 
     * * `status` - Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     * * `description` - A description for this Domain.
     * 
     * * `master_ips` - The IP addresses representing the master DNS for this Domain.
     * 
     * * `axfr_ips` - The list of IPs that may perform a zone transfer for this Domain.
     * 
     * * `ttl_sec` - &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * * `retry_sec` - The interval, in seconds, at which a failed refresh should be retried.
     * 
     * * `expire_sec` - The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     * * `refresh_sec` - The amount of time in seconds before this Domain should be refreshed.
     * 
     * * `soa_email` - Start of Authority email address.
     * 
     * * `tags` - An array of tags applied to this object.
     * 
     */
    public static Output<GetDomainResult> getDomain(GetDomainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDomain:getDomain", TypeShape.of(GetDomainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode domain.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode domain.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *         final var bar = LinodeFunctions.getDomain(GetDomainArgs.builder()
     *             .domain(&#34;bar.example.com&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Domain resource exports the following attributes:
     * 
     * * `id` - The unique ID of this Domain.
     * 
     * * `domain` - The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     * * `type` - If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     * * `group` - The group this Domain belongs to.
     * 
     * * `status` - Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     * * `description` - A description for this Domain.
     * 
     * * `master_ips` - The IP addresses representing the master DNS for this Domain.
     * 
     * * `axfr_ips` - The list of IPs that may perform a zone transfer for this Domain.
     * 
     * * `ttl_sec` - &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * * `retry_sec` - The interval, in seconds, at which a failed refresh should be retried.
     * 
     * * `expire_sec` - The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     * * `refresh_sec` - The amount of time in seconds before this Domain should be refreshed.
     * 
     * * `soa_email` - Start of Authority email address.
     * 
     * * `tags` - An array of tags applied to this object.
     * 
     */
    public static CompletableFuture<GetDomainResult> getDomainPlain(GetDomainPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDomain:getDomain", TypeShape.of(GetDomainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Domain Record.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Domain Record.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainRecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()
     *             .domainId(&#34;3150401&#34;)
     *             .id(&#34;14950401&#34;)
     *             .build());
     * 
     *         final var myWwwRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()
     *             .domainId(&#34;3150401&#34;)
     *             .name(&#34;www&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `id` - The unique ID of the Domain Record.
     * 
     * - `name` - The name of the Record.
     * 
     * - `domain_id` - The associated domain&#39;s unique ID.
     * 
     * - `type` - The type of Record this is in the DNS system. See all record types [here](https://www.linode.com/docs/api/domains/#domain-records-list__responses).
     * 
     * - `ttl_sec` - The amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * - `target` - The target for this Record. This field&#39;s actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.
     * 
     * - `priority` - The priority of the target host. Lower values are preferred.
     * 
     * - `weight` - The relative weight of this Record. Higher values are preferred.
     * 
     * - `port` - The port this Record points to.
     * 
     * - `protocol` - The protocol this Record&#39;s service communicates with. Only valid for SRV records.
     * 
     * - `service` - The service this Record identified. Only valid for SRV records.
     * 
     * - `tag` - The tag portion of a CAA record.
     * 
     */
    public static Output<GetDomainRecordResult> getDomainRecord(GetDomainRecordArgs args) {
        return getDomainRecord(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Domain Record.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Domain Record.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainRecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()
     *             .domainId(&#34;3150401&#34;)
     *             .id(&#34;14950401&#34;)
     *             .build());
     * 
     *         final var myWwwRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()
     *             .domainId(&#34;3150401&#34;)
     *             .name(&#34;www&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `id` - The unique ID of the Domain Record.
     * 
     * - `name` - The name of the Record.
     * 
     * - `domain_id` - The associated domain&#39;s unique ID.
     * 
     * - `type` - The type of Record this is in the DNS system. See all record types [here](https://www.linode.com/docs/api/domains/#domain-records-list__responses).
     * 
     * - `ttl_sec` - The amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * - `target` - The target for this Record. This field&#39;s actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.
     * 
     * - `priority` - The priority of the target host. Lower values are preferred.
     * 
     * - `weight` - The relative weight of this Record. Higher values are preferred.
     * 
     * - `port` - The port this Record points to.
     * 
     * - `protocol` - The protocol this Record&#39;s service communicates with. Only valid for SRV records.
     * 
     * - `service` - The service this Record identified. Only valid for SRV records.
     * 
     * - `tag` - The tag portion of a CAA record.
     * 
     */
    public static CompletableFuture<GetDomainRecordResult> getDomainRecordPlain(GetDomainRecordPlainArgs args) {
        return getDomainRecordPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Domain Record.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Domain Record.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainRecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()
     *             .domainId(&#34;3150401&#34;)
     *             .id(&#34;14950401&#34;)
     *             .build());
     * 
     *         final var myWwwRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()
     *             .domainId(&#34;3150401&#34;)
     *             .name(&#34;www&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `id` - The unique ID of the Domain Record.
     * 
     * - `name` - The name of the Record.
     * 
     * - `domain_id` - The associated domain&#39;s unique ID.
     * 
     * - `type` - The type of Record this is in the DNS system. See all record types [here](https://www.linode.com/docs/api/domains/#domain-records-list__responses).
     * 
     * - `ttl_sec` - The amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * - `target` - The target for this Record. This field&#39;s actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.
     * 
     * - `priority` - The priority of the target host. Lower values are preferred.
     * 
     * - `weight` - The relative weight of this Record. Higher values are preferred.
     * 
     * - `port` - The port this Record points to.
     * 
     * - `protocol` - The protocol this Record&#39;s service communicates with. Only valid for SRV records.
     * 
     * - `service` - The service this Record identified. Only valid for SRV records.
     * 
     * - `tag` - The tag portion of a CAA record.
     * 
     */
    public static Output<GetDomainRecordResult> getDomainRecord(GetDomainRecordArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDomainRecord:getDomainRecord", TypeShape.of(GetDomainRecordResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Domain Record.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Domain Record.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainRecordArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()
     *             .domainId(&#34;3150401&#34;)
     *             .id(&#34;14950401&#34;)
     *             .build());
     * 
     *         final var myWwwRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()
     *             .domainId(&#34;3150401&#34;)
     *             .name(&#34;www&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `id` - The unique ID of the Domain Record.
     * 
     * - `name` - The name of the Record.
     * 
     * - `domain_id` - The associated domain&#39;s unique ID.
     * 
     * - `type` - The type of Record this is in the DNS system. See all record types [here](https://www.linode.com/docs/api/domains/#domain-records-list__responses).
     * 
     * - `ttl_sec` - The amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     * - `target` - The target for this Record. This field&#39;s actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.
     * 
     * - `priority` - The priority of the target host. Lower values are preferred.
     * 
     * - `weight` - The relative weight of this Record. Higher values are preferred.
     * 
     * - `port` - The port this Record points to.
     * 
     * - `protocol` - The protocol this Record&#39;s service communicates with. Only valid for SRV records.
     * 
     * - `service` - The service this Record identified. Only valid for SRV records.
     * 
     * - `tag` - The tag portion of a CAA record.
     * 
     */
    public static CompletableFuture<GetDomainRecordResult> getDomainRecordPlain(GetDomainRecordPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDomainRecord:getDomainRecord", TypeShape.of(GetDomainRecordResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Domain Zonefile.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Domain Zonefile.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainZonefileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myZonefile = LinodeFunctions.getDomainZonefile(GetDomainZonefileArgs.builder()
     *             .domainId(3150401)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `domain_id` - The associated domain&#39;s unique ID.
     * 
     * - `zone_file` - Array of strings representing the Domain Zonefile.
     * 
     */
    public static Output<GetDomainZonefileResult> getDomainZonefile(GetDomainZonefileArgs args) {
        return getDomainZonefile(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Domain Zonefile.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Domain Zonefile.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainZonefileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myZonefile = LinodeFunctions.getDomainZonefile(GetDomainZonefileArgs.builder()
     *             .domainId(3150401)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `domain_id` - The associated domain&#39;s unique ID.
     * 
     * - `zone_file` - Array of strings representing the Domain Zonefile.
     * 
     */
    public static CompletableFuture<GetDomainZonefileResult> getDomainZonefilePlain(GetDomainZonefilePlainArgs args) {
        return getDomainZonefilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Domain Zonefile.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Domain Zonefile.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainZonefileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myZonefile = LinodeFunctions.getDomainZonefile(GetDomainZonefileArgs.builder()
     *             .domainId(3150401)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `domain_id` - The associated domain&#39;s unique ID.
     * 
     * - `zone_file` - Array of strings representing the Domain Zonefile.
     * 
     */
    public static Output<GetDomainZonefileResult> getDomainZonefile(GetDomainZonefileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getDomainZonefile:getDomainZonefile", TypeShape.of(GetDomainZonefileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Domain Zonefile.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Domain Zonefile.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetDomainZonefileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myZonefile = LinodeFunctions.getDomainZonefile(GetDomainZonefileArgs.builder()
     *             .domainId(3150401)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `domain_id` - The associated domain&#39;s unique ID.
     * 
     * - `zone_file` - Array of strings representing the Domain Zonefile.
     * 
     */
    public static CompletableFuture<GetDomainZonefileResult> getDomainZonefilePlain(GetDomainZonefilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getDomainZonefile:getDomainZonefile", TypeShape.of(GetDomainZonefileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Linode Firewall.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-firewall = LinodeFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFirewallResult> getFirewall(GetFirewallArgs args) {
        return getFirewall(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Linode Firewall.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-firewall = LinodeFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFirewallResult> getFirewallPlain(GetFirewallPlainArgs args) {
        return getFirewallPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Linode Firewall.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-firewall = LinodeFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFirewallResult> getFirewall(GetFirewallArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getFirewall:getFirewall", TypeShape.of(GetFirewallResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Linode Firewall.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-firewall = LinodeFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFirewallResult> getFirewallPlain(GetFirewallPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getFirewall:getFirewall", TypeShape.of(GetFirewallResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode image
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode image.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var k8Master = LinodeFunctions.getImage(GetImageArgs.builder()
     *             .id(&#34;linode/debian8&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Image resource exports the following attributes:
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     */
    public static Output<GetImageResult> getImage(GetImageArgs args) {
        return getImage(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode image
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode image.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var k8Master = LinodeFunctions.getImage(GetImageArgs.builder()
     *             .id(&#34;linode/debian8&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Image resource exports the following attributes:
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     */
    public static CompletableFuture<GetImageResult> getImagePlain(GetImagePlainArgs args) {
        return getImagePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode image
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode image.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var k8Master = LinodeFunctions.getImage(GetImageArgs.builder()
     *             .id(&#34;linode/debian8&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Image resource exports the following attributes:
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     */
    public static Output<GetImageResult> getImage(GetImageArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getImage:getImage", TypeShape.of(GetImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode image
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode image.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var k8Master = LinodeFunctions.getImage(GetImageArgs.builder()
     *             .id(&#34;linode/debian8&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Image resource exports the following attributes:
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     */
    public static CompletableFuture<GetImageResult> getImagePlain(GetImagePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getImage:getImage", TypeShape.of(GetImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode images that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode images with a certain label and visibility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-images = LinodeFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;Debian 8&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode images associated with the current token:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-images = LinodeFunctions.getImages();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode image will be stored in the `images` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     * ## Filterable Fields
     * 
     * * `created_by`
     * 
     * * `deprecated`
     * 
     * * `description`
     * 
     * * `id`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `size`
     * 
     * * `status`
     * 
     * * `vendor`
     * 
     */
    public static Output<GetImagesResult> getImages() {
        return getImages(GetImagesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode images that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode images with a certain label and visibility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-images = LinodeFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;Debian 8&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode images associated with the current token:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-images = LinodeFunctions.getImages();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode image will be stored in the `images` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     * ## Filterable Fields
     * 
     * * `created_by`
     * 
     * * `deprecated`
     * 
     * * `description`
     * 
     * * `id`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `size`
     * 
     * * `status`
     * 
     * * `vendor`
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain() {
        return getImagesPlain(GetImagesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode images that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode images with a certain label and visibility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-images = LinodeFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;Debian 8&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode images associated with the current token:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-images = LinodeFunctions.getImages();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode image will be stored in the `images` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     * ## Filterable Fields
     * 
     * * `created_by`
     * 
     * * `deprecated`
     * 
     * * `description`
     * 
     * * `id`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `size`
     * 
     * * `status`
     * 
     * * `vendor`
     * 
     */
    public static Output<GetImagesResult> getImages(GetImagesArgs args) {
        return getImages(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode images that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode images with a certain label and visibility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-images = LinodeFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;Debian 8&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode images associated with the current token:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-images = LinodeFunctions.getImages();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode image will be stored in the `images` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     * ## Filterable Fields
     * 
     * * `created_by`
     * 
     * * `deprecated`
     * 
     * * `description`
     * 
     * * `id`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `size`
     * 
     * * `status`
     * 
     * * `vendor`
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain(GetImagesPlainArgs args) {
        return getImagesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode images that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode images with a certain label and visibility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-images = LinodeFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;Debian 8&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode images associated with the current token:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-images = LinodeFunctions.getImages();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode image will be stored in the `images` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     * ## Filterable Fields
     * 
     * * `created_by`
     * 
     * * `deprecated`
     * 
     * * `description`
     * 
     * * `id`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `size`
     * 
     * * `status`
     * 
     * * `vendor`
     * 
     */
    public static Output<GetImagesResult> getImages(GetImagesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getImages:getImages", TypeShape.of(GetImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode images that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode images with a certain label and visibility:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-images = LinodeFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;Debian 8&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode images associated with the current token:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-images = LinodeFunctions.getImages();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode image will be stored in the `images` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     * * `label` - A short description of the Image.
     * 
     * * `created` - When this Image was created.
     * 
     * * `created_by` - The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     * * `deprecated` - Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     * * `description` - A detailed description of this Image.
     * 
     * * `is_public` - True if the Image is public.
     * 
     * * `size` - The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     * * `status` - The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     * * `type` - How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     * * `vendor` - The upstream distribution vendor. `None` for private Images.
     * 
     * ## Filterable Fields
     * 
     * * `created_by`
     * 
     * * `deprecated`
     * 
     * * `description`
     * 
     * * `id`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `size`
     * 
     * * `status`
     * 
     * * `vendor`
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain(GetImagesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getImages:getImages", TypeShape.of(GetImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about the backups of an Instance.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-backups = LinodeFunctions.getInstanceBackups(GetInstanceBackupsArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceBackupsResult> getInstanceBackups(GetInstanceBackupsArgs args) {
        return getInstanceBackups(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about the backups of an Instance.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-backups = LinodeFunctions.getInstanceBackups(GetInstanceBackupsArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceBackupsResult> getInstanceBackupsPlain(GetInstanceBackupsPlainArgs args) {
        return getInstanceBackupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about the backups of an Instance.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-backups = LinodeFunctions.getInstanceBackups(GetInstanceBackupsArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInstanceBackupsResult> getInstanceBackups(GetInstanceBackupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getInstanceBackups:getInstanceBackups", TypeShape.of(GetInstanceBackupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about the backups of an Instance.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceBackupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-backups = LinodeFunctions.getInstanceBackups(GetInstanceBackupsArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInstanceBackupsResult> getInstanceBackupsPlain(GetInstanceBackupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getInstanceBackups:getInstanceBackups", TypeShape.of(GetInstanceBackupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode instance type
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Instance type.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = LinodeFunctions.getInstanceType(GetInstanceTypeArgs.builder()
     *             .id(&#34;g6-standard-2&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Instance Type resource exports the following attributes:
     * 
     * * `id` - The ID representing the Linode Type
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     */
    public static Output<GetInstanceTypeResult> getInstanceType(GetInstanceTypeArgs args) {
        return getInstanceType(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode instance type
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Instance type.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = LinodeFunctions.getInstanceType(GetInstanceTypeArgs.builder()
     *             .id(&#34;g6-standard-2&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Instance Type resource exports the following attributes:
     * 
     * * `id` - The ID representing the Linode Type
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     */
    public static CompletableFuture<GetInstanceTypeResult> getInstanceTypePlain(GetInstanceTypePlainArgs args) {
        return getInstanceTypePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode instance type
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Instance type.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = LinodeFunctions.getInstanceType(GetInstanceTypeArgs.builder()
     *             .id(&#34;g6-standard-2&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Instance Type resource exports the following attributes:
     * 
     * * `id` - The ID representing the Linode Type
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     */
    public static Output<GetInstanceTypeResult> getInstanceType(GetInstanceTypeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getInstanceType:getInstanceType", TypeShape.of(GetInstanceTypeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode instance type
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Instance type.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = LinodeFunctions.getInstanceType(GetInstanceTypeArgs.builder()
     *             .id(&#34;g6-standard-2&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Instance Type resource exports the following attributes:
     * 
     * * `id` - The ID representing the Linode Type
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     */
    public static CompletableFuture<GetInstanceTypeResult> getInstanceTypePlain(GetInstanceTypePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getInstanceType:getInstanceType", TypeShape.of(GetInstanceTypeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode Instance types that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Instance types with a certain number of VCPUs:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .filters(GetInstanceTypesFilterArgs.builder()
     *                 .name(&#34;vcpus&#34;)
     *                 .values(2)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode Instance types:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-types = LinodeFunctions.getInstanceTypes();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode Instance type will be stored in the `types` attribute and will export the following attributes:
     * 
     * * `id` - The ID representing the Linode Type.
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only.
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type.
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     * ## Filterable Fields
     * 
     * * `class`
     * 
     * * `disk`
     * 
     * * `gpus`
     * 
     * * `label`
     * 
     * * `memory`
     * 
     * * `network_out`
     * 
     * * `transfer`
     * 
     * * `vcpus`
     * 
     */
    public static Output<GetInstanceTypesResult> getInstanceTypes() {
        return getInstanceTypes(GetInstanceTypesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Instance types that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Instance types with a certain number of VCPUs:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .filters(GetInstanceTypesFilterArgs.builder()
     *                 .name(&#34;vcpus&#34;)
     *                 .values(2)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode Instance types:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-types = LinodeFunctions.getInstanceTypes();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode Instance type will be stored in the `types` attribute and will export the following attributes:
     * 
     * * `id` - The ID representing the Linode Type.
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only.
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type.
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     * ## Filterable Fields
     * 
     * * `class`
     * 
     * * `disk`
     * 
     * * `gpus`
     * 
     * * `label`
     * 
     * * `memory`
     * 
     * * `network_out`
     * 
     * * `transfer`
     * 
     * * `vcpus`
     * 
     */
    public static CompletableFuture<GetInstanceTypesResult> getInstanceTypesPlain() {
        return getInstanceTypesPlain(GetInstanceTypesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Instance types that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Instance types with a certain number of VCPUs:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .filters(GetInstanceTypesFilterArgs.builder()
     *                 .name(&#34;vcpus&#34;)
     *                 .values(2)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode Instance types:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-types = LinodeFunctions.getInstanceTypes();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode Instance type will be stored in the `types` attribute and will export the following attributes:
     * 
     * * `id` - The ID representing the Linode Type.
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only.
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type.
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     * ## Filterable Fields
     * 
     * * `class`
     * 
     * * `disk`
     * 
     * * `gpus`
     * 
     * * `label`
     * 
     * * `memory`
     * 
     * * `network_out`
     * 
     * * `transfer`
     * 
     * * `vcpus`
     * 
     */
    public static Output<GetInstanceTypesResult> getInstanceTypes(GetInstanceTypesArgs args) {
        return getInstanceTypes(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Instance types that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Instance types with a certain number of VCPUs:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .filters(GetInstanceTypesFilterArgs.builder()
     *                 .name(&#34;vcpus&#34;)
     *                 .values(2)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode Instance types:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-types = LinodeFunctions.getInstanceTypes();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode Instance type will be stored in the `types` attribute and will export the following attributes:
     * 
     * * `id` - The ID representing the Linode Type.
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only.
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type.
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     * ## Filterable Fields
     * 
     * * `class`
     * 
     * * `disk`
     * 
     * * `gpus`
     * 
     * * `label`
     * 
     * * `memory`
     * 
     * * `network_out`
     * 
     * * `transfer`
     * 
     * * `vcpus`
     * 
     */
    public static CompletableFuture<GetInstanceTypesResult> getInstanceTypesPlain(GetInstanceTypesPlainArgs args) {
        return getInstanceTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode Instance types that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Instance types with a certain number of VCPUs:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .filters(GetInstanceTypesFilterArgs.builder()
     *                 .name(&#34;vcpus&#34;)
     *                 .values(2)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode Instance types:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-types = LinodeFunctions.getInstanceTypes();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode Instance type will be stored in the `types` attribute and will export the following attributes:
     * 
     * * `id` - The ID representing the Linode Type.
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only.
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type.
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     * ## Filterable Fields
     * 
     * * `class`
     * 
     * * `disk`
     * 
     * * `gpus`
     * 
     * * `label`
     * 
     * * `memory`
     * 
     * * `network_out`
     * 
     * * `transfer`
     * 
     * * `vcpus`
     * 
     */
    public static Output<GetInstanceTypesResult> getInstanceTypes(GetInstanceTypesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getInstanceTypes:getInstanceTypes", TypeShape.of(GetInstanceTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode Instance types that match a set of filters.
     * 
     * ## Example Usage
     * 
     * Get information about all Linode Instance types with a certain number of VCPUs:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()
     *             .filters(GetInstanceTypesFilterArgs.builder()
     *                 .name(&#34;vcpus&#34;)
     *                 .values(2)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get information about all Linode Instance types:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetInstanceTypesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all-types = LinodeFunctions.getInstanceTypes();
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode Instance type will be stored in the `types` attribute and will export the following attributes:
     * 
     * * `id` - The ID representing the Linode Type.
     * 
     * * `label` - The Linode Type&#39;s label is for display purposes only.
     * 
     * * `class` - The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     * * `disk` - The Disk size, in MB, of the Linode Type.
     * 
     * * `price.0.hourly` -  Cost (in US dollars) per hour.
     * 
     * * `price.0.monthly` - Cost (in US dollars) per month.
     * 
     * * `addons.0.backups.0.price.0.hourly` - The cost (in US dollars) per hour to add Backups service.
     * 
     * * `addons.0.backups.0.price.0.monthly` - The cost (in US dollars) per month to add Backups service.
     * 
     * * `network_out` - The Mbits outbound bandwidth allocation.
     * 
     * * `memory` - The amount of RAM included in this Linode Type.
     * 
     * * `transfer` - The monthly outbound transfer amount, in MB.
     * 
     * * `vcpus` - The number of VCPU cores this Linode Type offers.
     * 
     * ## Filterable Fields
     * 
     * * `class`
     * 
     * * `disk`
     * 
     * * `gpus`
     * 
     * * `label`
     * 
     * * `memory`
     * 
     * * `network_out`
     * 
     * * `transfer`
     * 
     * * `vcpus`
     * 
     */
    public static CompletableFuture<GetInstanceTypesResult> getInstanceTypesPlain(GetInstanceTypesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getInstanceTypes:getInstanceTypes", TypeShape.of(GetInstanceTypesResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetInstancesResult> getInstances() {
        return getInstances(GetInstancesArgs.Empty, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetInstancesResult> getInstancesPlain() {
        return getInstancesPlain(GetInstancesPlainArgs.Empty, InvokeOptions.Empty);
    }
    public static Output<GetInstancesResult> getInstances(GetInstancesArgs args) {
        return getInstances(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetInstancesResult> getInstancesPlain(GetInstancesPlainArgs args) {
        return getInstancesPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetInstancesResult> getInstances(GetInstancesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getInstances:getInstances", TypeShape.of(GetInstancesResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetInstancesResult> getInstancesPlain(GetInstancesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getInstances:getInstances", TypeShape.of(GetInstancesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode IPv6 Range.
     * 
     * ## Example Usage
     * 
     * Get information about an IPv6 range assigned to a Linode:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetIpv6RangeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var range-info = LinodeFunctions.getIpv6Range(GetIpv6RangeArgs.builder()
     *             .range(&#34;2001:0db8::&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.Ipv6Range` data source exports the following attributes:
     * 
     * * `ip_bgp` - Whether this IPv6 range is shared.
     * 
     * * `linodes` - A set of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
     * 
     * * `prefix` - The prefix length of the address, denoting how many addresses can be assigned from this range.
     * 
     * * `region` - The region for this range of IPv6 addresses.
     * 
     */
    public static Output<GetIpv6RangeResult> getIpv6Range(GetIpv6RangeArgs args) {
        return getIpv6Range(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode IPv6 Range.
     * 
     * ## Example Usage
     * 
     * Get information about an IPv6 range assigned to a Linode:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetIpv6RangeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var range-info = LinodeFunctions.getIpv6Range(GetIpv6RangeArgs.builder()
     *             .range(&#34;2001:0db8::&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.Ipv6Range` data source exports the following attributes:
     * 
     * * `ip_bgp` - Whether this IPv6 range is shared.
     * 
     * * `linodes` - A set of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
     * 
     * * `prefix` - The prefix length of the address, denoting how many addresses can be assigned from this range.
     * 
     * * `region` - The region for this range of IPv6 addresses.
     * 
     */
    public static CompletableFuture<GetIpv6RangeResult> getIpv6RangePlain(GetIpv6RangePlainArgs args) {
        return getIpv6RangePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode IPv6 Range.
     * 
     * ## Example Usage
     * 
     * Get information about an IPv6 range assigned to a Linode:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetIpv6RangeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var range-info = LinodeFunctions.getIpv6Range(GetIpv6RangeArgs.builder()
     *             .range(&#34;2001:0db8::&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.Ipv6Range` data source exports the following attributes:
     * 
     * * `ip_bgp` - Whether this IPv6 range is shared.
     * 
     * * `linodes` - A set of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
     * 
     * * `prefix` - The prefix length of the address, denoting how many addresses can be assigned from this range.
     * 
     * * `region` - The region for this range of IPv6 addresses.
     * 
     */
    public static Output<GetIpv6RangeResult> getIpv6Range(GetIpv6RangeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getIpv6Range:getIpv6Range", TypeShape.of(GetIpv6RangeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode IPv6 Range.
     * 
     * ## Example Usage
     * 
     * Get information about an IPv6 range assigned to a Linode:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetIpv6RangeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var range-info = LinodeFunctions.getIpv6Range(GetIpv6RangeArgs.builder()
     *             .range(&#34;2001:0db8::&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The `linode.Ipv6Range` data source exports the following attributes:
     * 
     * * `ip_bgp` - Whether this IPv6 range is shared.
     * 
     * * `linodes` - A set of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.
     * 
     * * `prefix` - The prefix length of the address, denoting how many addresses can be assigned from this range.
     * 
     * * `region` - The region for this range of IPv6 addresses.
     * 
     */
    public static CompletableFuture<GetIpv6RangeResult> getIpv6RangePlain(GetIpv6RangePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getIpv6Range:getIpv6Range", TypeShape.of(GetIpv6RangeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode kernel
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode kernel.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetKernelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var latest = LinodeFunctions.getKernel(GetKernelArgs.builder()
     *             .id(&#34;linode/latest-64bit&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Kernel resource exports the following attributes:
     * 
     * * `architecture` - The architecture of this Kernel.
     * 
     * * `deprecated` - Whether or not this Kernel is deprecated.
     * 
     * * `kvm` - If this Kernel is suitable for KVM Linodes.
     * 
     * * `label` - The friendly name of this Kernel.
     * 
     * * `pvops` - If this Kernel is suitable for paravirtualized operations.
     * 
     * * `version` - Linux Kernel version
     * 
     * * `xen` - If this Kernel is suitable for Xen Linodes.
     * 
     */
    public static Output<GetKernelResult> getKernel(GetKernelArgs args) {
        return getKernel(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode kernel
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode kernel.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetKernelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var latest = LinodeFunctions.getKernel(GetKernelArgs.builder()
     *             .id(&#34;linode/latest-64bit&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Kernel resource exports the following attributes:
     * 
     * * `architecture` - The architecture of this Kernel.
     * 
     * * `deprecated` - Whether or not this Kernel is deprecated.
     * 
     * * `kvm` - If this Kernel is suitable for KVM Linodes.
     * 
     * * `label` - The friendly name of this Kernel.
     * 
     * * `pvops` - If this Kernel is suitable for paravirtualized operations.
     * 
     * * `version` - Linux Kernel version
     * 
     * * `xen` - If this Kernel is suitable for Xen Linodes.
     * 
     */
    public static CompletableFuture<GetKernelResult> getKernelPlain(GetKernelPlainArgs args) {
        return getKernelPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode kernel
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode kernel.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetKernelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var latest = LinodeFunctions.getKernel(GetKernelArgs.builder()
     *             .id(&#34;linode/latest-64bit&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Kernel resource exports the following attributes:
     * 
     * * `architecture` - The architecture of this Kernel.
     * 
     * * `deprecated` - Whether or not this Kernel is deprecated.
     * 
     * * `kvm` - If this Kernel is suitable for KVM Linodes.
     * 
     * * `label` - The friendly name of this Kernel.
     * 
     * * `pvops` - If this Kernel is suitable for paravirtualized operations.
     * 
     * * `version` - Linux Kernel version
     * 
     * * `xen` - If this Kernel is suitable for Xen Linodes.
     * 
     */
    public static Output<GetKernelResult> getKernel(GetKernelArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getKernel:getKernel", TypeShape.of(GetKernelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode kernel
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode kernel.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetKernelArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var latest = LinodeFunctions.getKernel(GetKernelArgs.builder()
     *             .id(&#34;linode/latest-64bit&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Kernel resource exports the following attributes:
     * 
     * * `architecture` - The architecture of this Kernel.
     * 
     * * `deprecated` - Whether or not this Kernel is deprecated.
     * 
     * * `kvm` - If this Kernel is suitable for KVM Linodes.
     * 
     * * `label` - The friendly name of this Kernel.
     * 
     * * `pvops` - If this Kernel is suitable for paravirtualized operations.
     * 
     * * `version` - Linux Kernel version
     * 
     * * `xen` - If this Kernel is suitable for Xen Linodes.
     * 
     */
    public static CompletableFuture<GetKernelResult> getKernelPlain(GetKernelPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getKernel:getKernel", TypeShape.of(GetKernelResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an LKE Cluster.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetLkeClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-cluster = LinodeFunctions.getLkeCluster(GetLkeClusterArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetLkeClusterResult> getLkeCluster(GetLkeClusterArgs args) {
        return getLkeCluster(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an LKE Cluster.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetLkeClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-cluster = LinodeFunctions.getLkeCluster(GetLkeClusterArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetLkeClusterResult> getLkeClusterPlain(GetLkeClusterPlainArgs args) {
        return getLkeClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about an LKE Cluster.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetLkeClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-cluster = LinodeFunctions.getLkeCluster(GetLkeClusterArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetLkeClusterResult> getLkeCluster(GetLkeClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getLkeCluster:getLkeCluster", TypeShape.of(GetLkeClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about an LKE Cluster.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetLkeClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-cluster = LinodeFunctions.getLkeCluster(GetLkeClusterArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetLkeClusterResult> getLkeClusterPlain(GetLkeClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getLkeCluster:getLkeCluster", TypeShape.of(GetLkeClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Networking IP Address
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Networking IP Address.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNetworkingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1LinodeCom = LinodeFunctions.getNetworkingIp(GetNetworkingIpArgs.builder()
     *             .address(&#34;162.159.27.72&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Network IP Address resource exports the following attributes:
     * 
     * * `address` - The IP address.
     * 
     * * `gateway` - The default gateway for this address.
     * 
     * * `subnet_mask` - The mask that separates host bits from network bits for this address.
     * 
     * * `prefix` - The number of bits set in the subnet mask.
     * 
     * * `type` - The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
     * 
     * * `public` - Whether this is a public or private IP address.
     * 
     * * `rdns` - The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
     * 
     * * `linode_id` - The ID of the Linode this address currently belongs to.
     * 
     * * `region` - The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    public static Output<GetNetworkingIpResult> getNetworkingIp(GetNetworkingIpArgs args) {
        return getNetworkingIp(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Networking IP Address
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Networking IP Address.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNetworkingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1LinodeCom = LinodeFunctions.getNetworkingIp(GetNetworkingIpArgs.builder()
     *             .address(&#34;162.159.27.72&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Network IP Address resource exports the following attributes:
     * 
     * * `address` - The IP address.
     * 
     * * `gateway` - The default gateway for this address.
     * 
     * * `subnet_mask` - The mask that separates host bits from network bits for this address.
     * 
     * * `prefix` - The number of bits set in the subnet mask.
     * 
     * * `type` - The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
     * 
     * * `public` - Whether this is a public or private IP address.
     * 
     * * `rdns` - The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
     * 
     * * `linode_id` - The ID of the Linode this address currently belongs to.
     * 
     * * `region` - The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    public static CompletableFuture<GetNetworkingIpResult> getNetworkingIpPlain(GetNetworkingIpPlainArgs args) {
        return getNetworkingIpPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Networking IP Address
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Networking IP Address.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNetworkingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1LinodeCom = LinodeFunctions.getNetworkingIp(GetNetworkingIpArgs.builder()
     *             .address(&#34;162.159.27.72&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Network IP Address resource exports the following attributes:
     * 
     * * `address` - The IP address.
     * 
     * * `gateway` - The default gateway for this address.
     * 
     * * `subnet_mask` - The mask that separates host bits from network bits for this address.
     * 
     * * `prefix` - The number of bits set in the subnet mask.
     * 
     * * `type` - The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
     * 
     * * `public` - Whether this is a public or private IP address.
     * 
     * * `rdns` - The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
     * 
     * * `linode_id` - The ID of the Linode this address currently belongs to.
     * 
     * * `region` - The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    public static Output<GetNetworkingIpResult> getNetworkingIp(GetNetworkingIpArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getNetworkingIp:getNetworkingIp", TypeShape.of(GetNetworkingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Networking IP Address
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Networking IP Address.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNetworkingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ns1LinodeCom = LinodeFunctions.getNetworkingIp(GetNetworkingIpArgs.builder()
     *             .address(&#34;162.159.27.72&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Network IP Address resource exports the following attributes:
     * 
     * * `address` - The IP address.
     * 
     * * `gateway` - The default gateway for this address.
     * 
     * * `subnet_mask` - The mask that separates host bits from network bits for this address.
     * 
     * * `prefix` - The number of bits set in the subnet mask.
     * 
     * * `type` - The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
     * 
     * * `public` - Whether this is a public or private IP address.
     * 
     * * `rdns` - The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
     * 
     * * `linode_id` - The ID of the Linode this address currently belongs to.
     * 
     * * `region` - The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    public static CompletableFuture<GetNetworkingIpResult> getNetworkingIpPlain(GetNetworkingIpPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getNetworkingIp:getNetworkingIp", TypeShape.of(GetNetworkingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Linode NodeBalancer.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-nodebalancer = LinodeFunctions.getNodeBalancer(GetNodeBalancerArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNodeBalancerResult> getNodeBalancer(GetNodeBalancerArgs args) {
        return getNodeBalancer(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Linode NodeBalancer.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-nodebalancer = LinodeFunctions.getNodeBalancer(GetNodeBalancerArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNodeBalancerResult> getNodeBalancerPlain(GetNodeBalancerPlainArgs args) {
        return getNodeBalancerPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Linode NodeBalancer.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-nodebalancer = LinodeFunctions.getNodeBalancer(GetNodeBalancerArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNodeBalancerResult> getNodeBalancer(GetNodeBalancerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getNodeBalancer:getNodeBalancer", TypeShape.of(GetNodeBalancerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Linode NodeBalancer.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-nodebalancer = LinodeFunctions.getNodeBalancer(GetNodeBalancerArgs.builder()
     *             .id(123)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNodeBalancerResult> getNodeBalancerPlain(GetNodeBalancerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getNodeBalancer:getNodeBalancer", TypeShape.of(GetNodeBalancerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Linode NodeBalancer Config.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-config = LinodeFunctions.getNodeBalancerConfig(GetNodeBalancerConfigArgs.builder()
     *             .id(123)
     *             .nodebalancerId(456)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNodeBalancerConfigResult> getNodeBalancerConfig(GetNodeBalancerConfigArgs args) {
        return getNodeBalancerConfig(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Linode NodeBalancer Config.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-config = LinodeFunctions.getNodeBalancerConfig(GetNodeBalancerConfigArgs.builder()
     *             .id(123)
     *             .nodebalancerId(456)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNodeBalancerConfigResult> getNodeBalancerConfigPlain(GetNodeBalancerConfigPlainArgs args) {
        return getNodeBalancerConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Linode NodeBalancer Config.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-config = LinodeFunctions.getNodeBalancerConfig(GetNodeBalancerConfigArgs.builder()
     *             .id(123)
     *             .nodebalancerId(456)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNodeBalancerConfigResult> getNodeBalancerConfig(GetNodeBalancerConfigArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getNodeBalancerConfig:getNodeBalancerConfig", TypeShape.of(GetNodeBalancerConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Linode NodeBalancer Config.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-config = LinodeFunctions.getNodeBalancerConfig(GetNodeBalancerConfigArgs.builder()
     *             .id(123)
     *             .nodebalancerId(456)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNodeBalancerConfigResult> getNodeBalancerConfigPlain(GetNodeBalancerConfigPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getNodeBalancerConfig:getNodeBalancerConfig", TypeShape.of(GetNodeBalancerConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Linode NodeBalancer node.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-node = LinodeFunctions.getNodeBalancerNode(GetNodeBalancerNodeArgs.builder()
     *             .configId(789)
     *             .id(123)
     *             .nodebalancerId(456)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNodeBalancerNodeResult> getNodeBalancerNode(GetNodeBalancerNodeArgs args) {
        return getNodeBalancerNode(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Linode NodeBalancer node.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-node = LinodeFunctions.getNodeBalancerNode(GetNodeBalancerNodeArgs.builder()
     *             .configId(789)
     *             .id(123)
     *             .nodebalancerId(456)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNodeBalancerNodeResult> getNodeBalancerNodePlain(GetNodeBalancerNodePlainArgs args) {
        return getNodeBalancerNodePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Linode NodeBalancer node.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-node = LinodeFunctions.getNodeBalancerNode(GetNodeBalancerNodeArgs.builder()
     *             .configId(789)
     *             .id(123)
     *             .nodebalancerId(456)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNodeBalancerNodeResult> getNodeBalancerNode(GetNodeBalancerNodeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getNodeBalancerNode:getNodeBalancerNode", TypeShape.of(GetNodeBalancerNodeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Linode NodeBalancer node.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetNodeBalancerNodeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var my-node = LinodeFunctions.getNodeBalancerNode(GetNodeBalancerNodeArgs.builder()
     *             .configId(789)
     *             .id(123)
     *             .nodebalancerId(456)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNodeBalancerNodeResult> getNodeBalancerNodePlain(GetNodeBalancerNodePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getNodeBalancerNode:getNodeBalancerNode", TypeShape.of(GetNodeBalancerNodeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Object Storage Cluster
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Object Storage Cluster.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetObjectStorageClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = LinodeFunctions.getObjectStorageCluster(GetObjectStorageClusterArgs.builder()
     *             .id(&#34;us-east-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Object Storage Cluster resource exports the following attributes:
     * 
     * * `domain` - The base URL for this cluster.
     * 
     * * `status` - This cluster&#39;s status. (`available`, `unavailable`)
     * 
     * * `region` - The region this cluster is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `static_site_domain` - The base URL for this cluster used when hosting static sites.
     * 
     */
    public static Output<GetObjectStorageClusterResult> getObjectStorageCluster(GetObjectStorageClusterArgs args) {
        return getObjectStorageCluster(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Object Storage Cluster
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Object Storage Cluster.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetObjectStorageClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = LinodeFunctions.getObjectStorageCluster(GetObjectStorageClusterArgs.builder()
     *             .id(&#34;us-east-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Object Storage Cluster resource exports the following attributes:
     * 
     * * `domain` - The base URL for this cluster.
     * 
     * * `status` - This cluster&#39;s status. (`available`, `unavailable`)
     * 
     * * `region` - The region this cluster is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `static_site_domain` - The base URL for this cluster used when hosting static sites.
     * 
     */
    public static CompletableFuture<GetObjectStorageClusterResult> getObjectStorageClusterPlain(GetObjectStorageClusterPlainArgs args) {
        return getObjectStorageClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Object Storage Cluster
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Object Storage Cluster.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetObjectStorageClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = LinodeFunctions.getObjectStorageCluster(GetObjectStorageClusterArgs.builder()
     *             .id(&#34;us-east-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Object Storage Cluster resource exports the following attributes:
     * 
     * * `domain` - The base URL for this cluster.
     * 
     * * `status` - This cluster&#39;s status. (`available`, `unavailable`)
     * 
     * * `region` - The region this cluster is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `static_site_domain` - The base URL for this cluster used when hosting static sites.
     * 
     */
    public static Output<GetObjectStorageClusterResult> getObjectStorageCluster(GetObjectStorageClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getObjectStorageCluster:getObjectStorageCluster", TypeShape.of(GetObjectStorageClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Object Storage Cluster
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Object Storage Cluster.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetObjectStorageClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var primary = LinodeFunctions.getObjectStorageCluster(GetObjectStorageClusterArgs.builder()
     *             .id(&#34;us-east-1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Object Storage Cluster resource exports the following attributes:
     * 
     * * `domain` - The base URL for this cluster.
     * 
     * * `status` - This cluster&#39;s status. (`available`, `unavailable`)
     * 
     * * `region` - The region this cluster is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `static_site_domain` - The base URL for this cluster used when hosting static sites.
     * 
     */
    public static CompletableFuture<GetObjectStorageClusterResult> getObjectStorageClusterPlain(GetObjectStorageClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getObjectStorageCluster:getObjectStorageCluster", TypeShape.of(GetObjectStorageClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode profile.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Profile resource exports the following attributes:
     * 
     * * `email` - The profile email address. This address will be used for communication with Linode as necessary.
     * 
     * * `timezone` - The profile&#39;s preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.
     * 
     * * `email_notifications` - If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.
     * 
     * * `username` - The username for logging in to Linode services.
     * 
     * * `ip_whitelist_enabled` - If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
     * 
     * * `lish_auth_method` - The methods of authentication allowed when connecting via Lish. &#39;keys_only&#39; is the most secure with the intent to use Lish, and &#39;disabled&#39; is recommended for users that will not use Lish at all.
     * 
     * * `authorized_keys` - The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is &#39;disabled&#39;.
     * 
     * * `two_factor_auth` - If true, logins from untrusted computers will require Two Factor Authentication.
     * 
     * * `restricted` - If true, the user has restrictions on what can be accessed on the Account.
     * 
     * * `referrals` - Credit Card information associated with this Account.
     * 
     * * `referrals.0.total` - The number of users who have signed up with the referral code.
     * 
     * * `referrals.0.credit` - The amount of account credit in US Dollars issued to the account through the referral program.
     * 
     * * `referrals.0.completed` - The number of completed signups with the referral code.
     * 
     * * `referrals.0.pending` - The number of pending signups for the referral code. To receive credit the signups must be completed.
     * 
     * * `referrals.0.code` - The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.
     * 
     * * `referrals.0.url` - The referral URL.
     * 
     */
    public static Output<GetProfileResult> getProfile() {
        return getProfile(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode profile.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Profile resource exports the following attributes:
     * 
     * * `email` - The profile email address. This address will be used for communication with Linode as necessary.
     * 
     * * `timezone` - The profile&#39;s preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.
     * 
     * * `email_notifications` - If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.
     * 
     * * `username` - The username for logging in to Linode services.
     * 
     * * `ip_whitelist_enabled` - If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
     * 
     * * `lish_auth_method` - The methods of authentication allowed when connecting via Lish. &#39;keys_only&#39; is the most secure with the intent to use Lish, and &#39;disabled&#39; is recommended for users that will not use Lish at all.
     * 
     * * `authorized_keys` - The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is &#39;disabled&#39;.
     * 
     * * `two_factor_auth` - If true, logins from untrusted computers will require Two Factor Authentication.
     * 
     * * `restricted` - If true, the user has restrictions on what can be accessed on the Account.
     * 
     * * `referrals` - Credit Card information associated with this Account.
     * 
     * * `referrals.0.total` - The number of users who have signed up with the referral code.
     * 
     * * `referrals.0.credit` - The amount of account credit in US Dollars issued to the account through the referral program.
     * 
     * * `referrals.0.completed` - The number of completed signups with the referral code.
     * 
     * * `referrals.0.pending` - The number of pending signups for the referral code. To receive credit the signups must be completed.
     * 
     * * `referrals.0.code` - The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.
     * 
     * * `referrals.0.url` - The referral URL.
     * 
     */
    public static CompletableFuture<GetProfileResult> getProfilePlain() {
        return getProfilePlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode profile.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Profile resource exports the following attributes:
     * 
     * * `email` - The profile email address. This address will be used for communication with Linode as necessary.
     * 
     * * `timezone` - The profile&#39;s preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.
     * 
     * * `email_notifications` - If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.
     * 
     * * `username` - The username for logging in to Linode services.
     * 
     * * `ip_whitelist_enabled` - If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
     * 
     * * `lish_auth_method` - The methods of authentication allowed when connecting via Lish. &#39;keys_only&#39; is the most secure with the intent to use Lish, and &#39;disabled&#39; is recommended for users that will not use Lish at all.
     * 
     * * `authorized_keys` - The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is &#39;disabled&#39;.
     * 
     * * `two_factor_auth` - If true, logins from untrusted computers will require Two Factor Authentication.
     * 
     * * `restricted` - If true, the user has restrictions on what can be accessed on the Account.
     * 
     * * `referrals` - Credit Card information associated with this Account.
     * 
     * * `referrals.0.total` - The number of users who have signed up with the referral code.
     * 
     * * `referrals.0.credit` - The amount of account credit in US Dollars issued to the account through the referral program.
     * 
     * * `referrals.0.completed` - The number of completed signups with the referral code.
     * 
     * * `referrals.0.pending` - The number of pending signups for the referral code. To receive credit the signups must be completed.
     * 
     * * `referrals.0.code` - The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.
     * 
     * * `referrals.0.url` - The referral URL.
     * 
     */
    public static Output<GetProfileResult> getProfile(InvokeArgs args) {
        return getProfile(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode profile.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Profile resource exports the following attributes:
     * 
     * * `email` - The profile email address. This address will be used for communication with Linode as necessary.
     * 
     * * `timezone` - The profile&#39;s preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.
     * 
     * * `email_notifications` - If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.
     * 
     * * `username` - The username for logging in to Linode services.
     * 
     * * `ip_whitelist_enabled` - If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
     * 
     * * `lish_auth_method` - The methods of authentication allowed when connecting via Lish. &#39;keys_only&#39; is the most secure with the intent to use Lish, and &#39;disabled&#39; is recommended for users that will not use Lish at all.
     * 
     * * `authorized_keys` - The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is &#39;disabled&#39;.
     * 
     * * `two_factor_auth` - If true, logins from untrusted computers will require Two Factor Authentication.
     * 
     * * `restricted` - If true, the user has restrictions on what can be accessed on the Account.
     * 
     * * `referrals` - Credit Card information associated with this Account.
     * 
     * * `referrals.0.total` - The number of users who have signed up with the referral code.
     * 
     * * `referrals.0.credit` - The amount of account credit in US Dollars issued to the account through the referral program.
     * 
     * * `referrals.0.completed` - The number of completed signups with the referral code.
     * 
     * * `referrals.0.pending` - The number of pending signups for the referral code. To receive credit the signups must be completed.
     * 
     * * `referrals.0.code` - The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.
     * 
     * * `referrals.0.url` - The referral URL.
     * 
     */
    public static CompletableFuture<GetProfileResult> getProfilePlain(InvokeArgs args) {
        return getProfilePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode profile.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Profile resource exports the following attributes:
     * 
     * * `email` - The profile email address. This address will be used for communication with Linode as necessary.
     * 
     * * `timezone` - The profile&#39;s preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.
     * 
     * * `email_notifications` - If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.
     * 
     * * `username` - The username for logging in to Linode services.
     * 
     * * `ip_whitelist_enabled` - If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
     * 
     * * `lish_auth_method` - The methods of authentication allowed when connecting via Lish. &#39;keys_only&#39; is the most secure with the intent to use Lish, and &#39;disabled&#39; is recommended for users that will not use Lish at all.
     * 
     * * `authorized_keys` - The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is &#39;disabled&#39;.
     * 
     * * `two_factor_auth` - If true, logins from untrusted computers will require Two Factor Authentication.
     * 
     * * `restricted` - If true, the user has restrictions on what can be accessed on the Account.
     * 
     * * `referrals` - Credit Card information associated with this Account.
     * 
     * * `referrals.0.total` - The number of users who have signed up with the referral code.
     * 
     * * `referrals.0.credit` - The amount of account credit in US Dollars issued to the account through the referral program.
     * 
     * * `referrals.0.completed` - The number of completed signups with the referral code.
     * 
     * * `referrals.0.pending` - The number of pending signups for the referral code. To receive credit the signups must be completed.
     * 
     * * `referrals.0.code` - The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.
     * 
     * * `referrals.0.url` - The referral URL.
     * 
     */
    public static Output<GetProfileResult> getProfile(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getProfile:getProfile", TypeShape.of(GetProfileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode profile.
     * 
     * ## Example Usage
     * ## Attributes
     * 
     * The Linode Profile resource exports the following attributes:
     * 
     * * `email` - The profile email address. This address will be used for communication with Linode as necessary.
     * 
     * * `timezone` - The profile&#39;s preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.
     * 
     * * `email_notifications` - If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.
     * 
     * * `username` - The username for logging in to Linode services.
     * 
     * * `ip_whitelist_enabled` - If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
     * 
     * * `lish_auth_method` - The methods of authentication allowed when connecting via Lish. &#39;keys_only&#39; is the most secure with the intent to use Lish, and &#39;disabled&#39; is recommended for users that will not use Lish at all.
     * 
     * * `authorized_keys` - The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is &#39;disabled&#39;.
     * 
     * * `two_factor_auth` - If true, logins from untrusted computers will require Two Factor Authentication.
     * 
     * * `restricted` - If true, the user has restrictions on what can be accessed on the Account.
     * 
     * * `referrals` - Credit Card information associated with this Account.
     * 
     * * `referrals.0.total` - The number of users who have signed up with the referral code.
     * 
     * * `referrals.0.credit` - The amount of account credit in US Dollars issued to the account through the referral program.
     * 
     * * `referrals.0.completed` - The number of completed signups with the referral code.
     * 
     * * `referrals.0.pending` - The number of pending signups for the referral code. To receive credit the signups must be completed.
     * 
     * * `referrals.0.code` - The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.
     * 
     * * `referrals.0.url` - The referral URL.
     * 
     */
    public static CompletableFuture<GetProfileResult> getProfilePlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getProfile:getProfile", TypeShape.of(GetProfileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `linode.getRegion` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * ## Example Usage
     * 
     * The following example shows how the resource might be used to obtain additional information about a Linode region.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetRegionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var region = LinodeFunctions.getRegion(GetRegionArgs.builder()
     *             .id(&#34;us-east&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRegionResult> getRegion(GetRegionArgs args) {
        return getRegion(args, InvokeOptions.Empty);
    }
    /**
     * `linode.getRegion` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * ## Example Usage
     * 
     * The following example shows how the resource might be used to obtain additional information about a Linode region.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetRegionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var region = LinodeFunctions.getRegion(GetRegionArgs.builder()
     *             .id(&#34;us-east&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRegionResult> getRegionPlain(GetRegionPlainArgs args) {
        return getRegionPlain(args, InvokeOptions.Empty);
    }
    /**
     * `linode.getRegion` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * ## Example Usage
     * 
     * The following example shows how the resource might be used to obtain additional information about a Linode region.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetRegionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var region = LinodeFunctions.getRegion(GetRegionArgs.builder()
     *             .id(&#34;us-east&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRegionResult> getRegion(GetRegionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getRegion:getRegion", TypeShape.of(GetRegionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `linode.getRegion` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * ## Example Usage
     * 
     * The following example shows how the resource might be used to obtain additional information about a Linode region.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetRegionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var region = LinodeFunctions.getRegion(GetRegionArgs.builder()
     *             .id(&#34;us-east&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRegionResult> getRegionPlain(GetRegionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getRegion:getRegion", TypeShape.of(GetRegionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `linode.SshKey` provides access to a specifically labeled SSH Key in the Profile of the User identified by the access token.
     * 
     * ## Example Usage
     * 
     * The following example shows how the resource might be used to obtain the name of the SSH Key configured on the Linode user profile.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .label(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args) {
        return getSshKey(args, InvokeOptions.Empty);
    }
    /**
     * `linode.SshKey` provides access to a specifically labeled SSH Key in the Profile of the User identified by the access token.
     * 
     * ## Example Usage
     * 
     * The following example shows how the resource might be used to obtain the name of the SSH Key configured on the Linode user profile.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .label(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain(GetSshKeyPlainArgs args) {
        return getSshKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * `linode.SshKey` provides access to a specifically labeled SSH Key in the Profile of the User identified by the access token.
     * 
     * ## Example Usage
     * 
     * The following example shows how the resource might be used to obtain the name of the SSH Key configured on the Linode user profile.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .label(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `linode.SshKey` provides access to a specifically labeled SSH Key in the Profile of the User identified by the access token.
     * 
     * ## Example Usage
     * 
     * The following example shows how the resource might be used to obtain the name of the SSH Key configured on the Linode user profile.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .label(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain(GetSshKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Linode StackScript.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myStackscript = LinodeFunctions.getStackScript(GetStackScriptArgs.builder()
     *             .id(355872)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * This resource exports the following attributes:
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     */
    public static Output<GetStackScriptResult> getStackScript(GetStackScriptArgs args) {
        return getStackScript(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Linode StackScript.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myStackscript = LinodeFunctions.getStackScript(GetStackScriptArgs.builder()
     *             .id(355872)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * This resource exports the following attributes:
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     */
    public static CompletableFuture<GetStackScriptResult> getStackScriptPlain(GetStackScriptPlainArgs args) {
        return getStackScriptPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Linode StackScript.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myStackscript = LinodeFunctions.getStackScript(GetStackScriptArgs.builder()
     *             .id(355872)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * This resource exports the following attributes:
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     */
    public static Output<GetStackScriptResult> getStackScript(GetStackScriptArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getStackScript:getStackScript", TypeShape.of(GetStackScriptResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Linode StackScript.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var myStackscript = LinodeFunctions.getStackScript(GetStackScriptArgs.builder()
     *             .id(355872)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * This resource exports the following attributes:
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     */
    public static CompletableFuture<GetStackScriptResult> getStackScriptPlain(GetStackScriptPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getStackScript:getStackScript", TypeShape.of(GetStackScriptResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode StackScripts that match a set of filters.
     * 
     * **NOTICE:** Due to the large number of public StackScripts, this data source may time out if `is_public` is not filtered on.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-stackscripts = LinodeFunctions.getStackScripts(GetStackScriptsArgs.builder()
     *             .filters(            
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;my-cool-stackscript&#34;)
     *                     .build(),
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(false)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode StackScript will be stored in the `stackscripts` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of the StackScript.
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     * ## Filterable Fields
     * 
     * * `deployments_active`
     * 
     * * `deployments_total`
     * 
     * * `description`
     * 
     * * `images`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `mine`
     * 
     * * `rev_note`
     * 
     * * `username`
     * 
     */
    public static Output<GetStackScriptsResult> getStackScripts() {
        return getStackScripts(GetStackScriptsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode StackScripts that match a set of filters.
     * 
     * **NOTICE:** Due to the large number of public StackScripts, this data source may time out if `is_public` is not filtered on.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-stackscripts = LinodeFunctions.getStackScripts(GetStackScriptsArgs.builder()
     *             .filters(            
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;my-cool-stackscript&#34;)
     *                     .build(),
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(false)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode StackScript will be stored in the `stackscripts` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of the StackScript.
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     * ## Filterable Fields
     * 
     * * `deployments_active`
     * 
     * * `deployments_total`
     * 
     * * `description`
     * 
     * * `images`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `mine`
     * 
     * * `rev_note`
     * 
     * * `username`
     * 
     */
    public static CompletableFuture<GetStackScriptsResult> getStackScriptsPlain() {
        return getStackScriptsPlain(GetStackScriptsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode StackScripts that match a set of filters.
     * 
     * **NOTICE:** Due to the large number of public StackScripts, this data source may time out if `is_public` is not filtered on.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-stackscripts = LinodeFunctions.getStackScripts(GetStackScriptsArgs.builder()
     *             .filters(            
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;my-cool-stackscript&#34;)
     *                     .build(),
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(false)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode StackScript will be stored in the `stackscripts` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of the StackScript.
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     * ## Filterable Fields
     * 
     * * `deployments_active`
     * 
     * * `deployments_total`
     * 
     * * `description`
     * 
     * * `images`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `mine`
     * 
     * * `rev_note`
     * 
     * * `username`
     * 
     */
    public static Output<GetStackScriptsResult> getStackScripts(GetStackScriptsArgs args) {
        return getStackScripts(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode StackScripts that match a set of filters.
     * 
     * **NOTICE:** Due to the large number of public StackScripts, this data source may time out if `is_public` is not filtered on.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-stackscripts = LinodeFunctions.getStackScripts(GetStackScriptsArgs.builder()
     *             .filters(            
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;my-cool-stackscript&#34;)
     *                     .build(),
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(false)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode StackScript will be stored in the `stackscripts` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of the StackScript.
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     * ## Filterable Fields
     * 
     * * `deployments_active`
     * 
     * * `deployments_total`
     * 
     * * `description`
     * 
     * * `images`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `mine`
     * 
     * * `rev_note`
     * 
     * * `username`
     * 
     */
    public static CompletableFuture<GetStackScriptsResult> getStackScriptsPlain(GetStackScriptsPlainArgs args) {
        return getStackScriptsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about Linode StackScripts that match a set of filters.
     * 
     * **NOTICE:** Due to the large number of public StackScripts, this data source may time out if `is_public` is not filtered on.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-stackscripts = LinodeFunctions.getStackScripts(GetStackScriptsArgs.builder()
     *             .filters(            
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;my-cool-stackscript&#34;)
     *                     .build(),
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(false)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode StackScript will be stored in the `stackscripts` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of the StackScript.
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     * ## Filterable Fields
     * 
     * * `deployments_active`
     * 
     * * `deployments_total`
     * 
     * * `description`
     * 
     * * `images`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `mine`
     * 
     * * `rev_note`
     * 
     * * `username`
     * 
     */
    public static Output<GetStackScriptsResult> getStackScripts(GetStackScriptsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getStackScripts:getStackScripts", TypeShape.of(GetStackScriptsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about Linode StackScripts that match a set of filters.
     * 
     * **NOTICE:** Due to the large number of public StackScripts, this data source may time out if `is_public` is not filtered on.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode StackScript.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetStackScriptsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var specific-stackscripts = LinodeFunctions.getStackScripts(GetStackScriptsArgs.builder()
     *             .filters(            
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;label&#34;)
     *                     .values(&#34;my-cool-stackscript&#34;)
     *                     .build(),
     *                 GetStackScriptsFilterArgs.builder()
     *                     .name(&#34;is_public&#34;)
     *                     .values(false)
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode StackScript will be stored in the `stackscripts` attribute and will export the following attributes:
     * 
     * * `id` - The unique ID of the StackScript.
     * 
     * * `label` - The StackScript&#39;s label is for display purposes only.
     * 
     * * `script` - The script to execute when provisioning a new Linode with this StackScript.
     * 
     * * `description` - A description for the StackScript.
     * 
     * * `rev_note` - This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     * * `is_public` - This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     * * `images` - An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     * * `deployments_active` - Count of currently active, deployed Linodes created from this StackScript.
     * 
     * * `user_gravatar_id` - The Gravatar ID for the User who created the StackScript.
     * 
     * * `deployments_total` - The total number of times this StackScript has been deployed.
     * 
     * * `username` - The User who created the StackScript.
     * 
     * * `created` - The date this StackScript was created.
     * 
     * * `updated` - The date this StackScript was updated.
     * 
     * * `user_defined_fields` - This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     *   
     *   * `label` - A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     *   
     *   * `name` - The name of the field.
     *   
     *   * `example` - An example value for the field.
     *   
     *   * `one_of` - A list of acceptable single values for the field.
     *   
     *   * `many_of` - A list of acceptable values for the field in any quantity, combination or order.
     *   
     *   * `default` - The default value. If not specified, this value will be used.
     * 
     * ## Filterable Fields
     * 
     * * `deployments_active`
     * 
     * * `deployments_total`
     * 
     * * `description`
     * 
     * * `images`
     * 
     * * `is_public`
     * 
     * * `label`
     * 
     * * `mine`
     * 
     * * `rev_note`
     * 
     * * `username`
     * 
     */
    public static CompletableFuture<GetStackScriptsResult> getStackScriptsPlain(GetStackScriptsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getStackScripts:getStackScripts", TypeShape.of(GetStackScriptsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode user
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode user.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode User resource exports the following attributes:
     * 
     * * `ssh_keys` - A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
     * 
     * * `email` - The email address for this User, for account management communications, and may be used for other communications as configured.
     * 
     * * `restricted` - If true, this User must be granted access to perform actions or access entities on this Account.
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode user
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode user.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode User resource exports the following attributes:
     * 
     * * `ssh_keys` - A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
     * 
     * * `email` - The email address for this User, for account management communications, and may be used for other communications as configured.
     * 
     * * `restricted` - If true, this User must be granted access to perform actions or access entities on this Account.
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode user
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode user.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode User resource exports the following attributes:
     * 
     * * `ssh_keys` - A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
     * 
     * * `email` - The email address for this User, for account management communications, and may be used for other communications as configured.
     * 
     * * `restricted` - If true, this User must be granted access to perform actions or access entities on this Account.
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode user
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode user.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;foo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode User resource exports the following attributes:
     * 
     * * `ssh_keys` - A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
     * 
     * * `email` - The email address for this User, for account management communications, and may be used for other communications as configured.
     * 
     * * `restricted` - If true, this User must be granted access to perform actions or access entities on this Account.
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about Linode VLANs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.Instance;
     * import com.pulumi.linode.InstanceArgs;
     * import com.pulumi.linode.inputs.InstanceInterfaceArgs;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myInstance = new Instance(&#34;myInstance&#34;, InstanceArgs.builder()        
     *             .image(&#34;linode/ubuntu18.04&#34;)
     *             .interfaces(InstanceInterfaceArgs.builder()
     *                 .label(&#34;my-vlan&#34;)
     *                 .purpose(&#34;vlan&#34;)
     *                 .build())
     *             .label(&#34;my_instance&#34;)
     *             .region(&#34;us-southeast&#34;)
     *             .rootPass(&#34;bogusPassword$&#34;)
     *             .type(&#34;g6-standard-1&#34;)
     *             .build());
     * 
     *         final var my-vlans = LinodeFunctions.getVlans(GetVlansArgs.builder()
     *             .filters(GetVlansFilterArgs.builder()
     *                 .name(&#34;label&#34;)
     *                 .values(&#34;my-vlan&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode VLAN will be stored in the `vlans` attribute and will export the following attributes:
     * 
     * * `label` - The unique label of the VLAN.
     * 
     * * `linodes` - The running Linodes currently attached to the VLAN.
     * 
     * * `region` - The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `created` - When the VLAN was created.
     * 
     * ## Filterable Fields
     * 
     * * `label`
     * 
     * * `region`
     * 
     */
    public static Output<GetVlansResult> getVlans() {
        return getVlans(GetVlansArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about Linode VLANs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.Instance;
     * import com.pulumi.linode.InstanceArgs;
     * import com.pulumi.linode.inputs.InstanceInterfaceArgs;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myInstance = new Instance(&#34;myInstance&#34;, InstanceArgs.builder()        
     *             .image(&#34;linode/ubuntu18.04&#34;)
     *             .interfaces(InstanceInterfaceArgs.builder()
     *                 .label(&#34;my-vlan&#34;)
     *                 .purpose(&#34;vlan&#34;)
     *                 .build())
     *             .label(&#34;my_instance&#34;)
     *             .region(&#34;us-southeast&#34;)
     *             .rootPass(&#34;bogusPassword$&#34;)
     *             .type(&#34;g6-standard-1&#34;)
     *             .build());
     * 
     *         final var my-vlans = LinodeFunctions.getVlans(GetVlansArgs.builder()
     *             .filters(GetVlansFilterArgs.builder()
     *                 .name(&#34;label&#34;)
     *                 .values(&#34;my-vlan&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode VLAN will be stored in the `vlans` attribute and will export the following attributes:
     * 
     * * `label` - The unique label of the VLAN.
     * 
     * * `linodes` - The running Linodes currently attached to the VLAN.
     * 
     * * `region` - The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `created` - When the VLAN was created.
     * 
     * ## Filterable Fields
     * 
     * * `label`
     * 
     * * `region`
     * 
     */
    public static CompletableFuture<GetVlansResult> getVlansPlain() {
        return getVlansPlain(GetVlansPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about Linode VLANs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.Instance;
     * import com.pulumi.linode.InstanceArgs;
     * import com.pulumi.linode.inputs.InstanceInterfaceArgs;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myInstance = new Instance(&#34;myInstance&#34;, InstanceArgs.builder()        
     *             .image(&#34;linode/ubuntu18.04&#34;)
     *             .interfaces(InstanceInterfaceArgs.builder()
     *                 .label(&#34;my-vlan&#34;)
     *                 .purpose(&#34;vlan&#34;)
     *                 .build())
     *             .label(&#34;my_instance&#34;)
     *             .region(&#34;us-southeast&#34;)
     *             .rootPass(&#34;bogusPassword$&#34;)
     *             .type(&#34;g6-standard-1&#34;)
     *             .build());
     * 
     *         final var my-vlans = LinodeFunctions.getVlans(GetVlansArgs.builder()
     *             .filters(GetVlansFilterArgs.builder()
     *                 .name(&#34;label&#34;)
     *                 .values(&#34;my-vlan&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode VLAN will be stored in the `vlans` attribute and will export the following attributes:
     * 
     * * `label` - The unique label of the VLAN.
     * 
     * * `linodes` - The running Linodes currently attached to the VLAN.
     * 
     * * `region` - The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `created` - When the VLAN was created.
     * 
     * ## Filterable Fields
     * 
     * * `label`
     * 
     * * `region`
     * 
     */
    public static Output<GetVlansResult> getVlans(GetVlansArgs args) {
        return getVlans(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about Linode VLANs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.Instance;
     * import com.pulumi.linode.InstanceArgs;
     * import com.pulumi.linode.inputs.InstanceInterfaceArgs;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myInstance = new Instance(&#34;myInstance&#34;, InstanceArgs.builder()        
     *             .image(&#34;linode/ubuntu18.04&#34;)
     *             .interfaces(InstanceInterfaceArgs.builder()
     *                 .label(&#34;my-vlan&#34;)
     *                 .purpose(&#34;vlan&#34;)
     *                 .build())
     *             .label(&#34;my_instance&#34;)
     *             .region(&#34;us-southeast&#34;)
     *             .rootPass(&#34;bogusPassword$&#34;)
     *             .type(&#34;g6-standard-1&#34;)
     *             .build());
     * 
     *         final var my-vlans = LinodeFunctions.getVlans(GetVlansArgs.builder()
     *             .filters(GetVlansFilterArgs.builder()
     *                 .name(&#34;label&#34;)
     *                 .values(&#34;my-vlan&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode VLAN will be stored in the `vlans` attribute and will export the following attributes:
     * 
     * * `label` - The unique label of the VLAN.
     * 
     * * `linodes` - The running Linodes currently attached to the VLAN.
     * 
     * * `region` - The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `created` - When the VLAN was created.
     * 
     * ## Filterable Fields
     * 
     * * `label`
     * 
     * * `region`
     * 
     */
    public static CompletableFuture<GetVlansResult> getVlansPlain(GetVlansPlainArgs args) {
        return getVlansPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about Linode VLANs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.Instance;
     * import com.pulumi.linode.InstanceArgs;
     * import com.pulumi.linode.inputs.InstanceInterfaceArgs;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myInstance = new Instance(&#34;myInstance&#34;, InstanceArgs.builder()        
     *             .image(&#34;linode/ubuntu18.04&#34;)
     *             .interfaces(InstanceInterfaceArgs.builder()
     *                 .label(&#34;my-vlan&#34;)
     *                 .purpose(&#34;vlan&#34;)
     *                 .build())
     *             .label(&#34;my_instance&#34;)
     *             .region(&#34;us-southeast&#34;)
     *             .rootPass(&#34;bogusPassword$&#34;)
     *             .type(&#34;g6-standard-1&#34;)
     *             .build());
     * 
     *         final var my-vlans = LinodeFunctions.getVlans(GetVlansArgs.builder()
     *             .filters(GetVlansFilterArgs.builder()
     *                 .name(&#34;label&#34;)
     *                 .values(&#34;my-vlan&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode VLAN will be stored in the `vlans` attribute and will export the following attributes:
     * 
     * * `label` - The unique label of the VLAN.
     * 
     * * `linodes` - The running Linodes currently attached to the VLAN.
     * 
     * * `region` - The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `created` - When the VLAN was created.
     * 
     * ## Filterable Fields
     * 
     * * `label`
     * 
     * * `region`
     * 
     */
    public static Output<GetVlansResult> getVlans(GetVlansArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getVlans:getVlans", TypeShape.of(GetVlansResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about Linode VLANs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.Instance;
     * import com.pulumi.linode.InstanceArgs;
     * import com.pulumi.linode.inputs.InstanceInterfaceArgs;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVlansArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myInstance = new Instance(&#34;myInstance&#34;, InstanceArgs.builder()        
     *             .image(&#34;linode/ubuntu18.04&#34;)
     *             .interfaces(InstanceInterfaceArgs.builder()
     *                 .label(&#34;my-vlan&#34;)
     *                 .purpose(&#34;vlan&#34;)
     *                 .build())
     *             .label(&#34;my_instance&#34;)
     *             .region(&#34;us-southeast&#34;)
     *             .rootPass(&#34;bogusPassword$&#34;)
     *             .type(&#34;g6-standard-1&#34;)
     *             .build());
     * 
     *         final var my-vlans = LinodeFunctions.getVlans(GetVlansArgs.builder()
     *             .filters(GetVlansFilterArgs.builder()
     *                 .name(&#34;label&#34;)
     *                 .values(&#34;my-vlan&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * Each Linode VLAN will be stored in the `vlans` attribute and will export the following attributes:
     * 
     * * `label` - The unique label of the VLAN.
     * 
     * * `linodes` - The running Linodes currently attached to the VLAN.
     * 
     * * `region` - The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * * `created` - When the VLAN was created.
     * 
     * ## Filterable Fields
     * 
     * * `label`
     * 
     * * `region`
     * 
     */
    public static CompletableFuture<GetVlansResult> getVlansPlain(GetVlansPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getVlans:getVlans", TypeShape.of(GetVlansResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Volume.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Volume.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getVolume(GetVolumeArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `id` - The unique ID of this Volume.
     * 
     * - `created` - When this Volume was created.
     * 
     * - `status` - The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
     * 
     * - `label` - This Volume&#39;s label is for display purposes only.
     * 
     * - `tags` - An array of tags applied to this object.
     * 
     * - `size` - The Volume&#39;s size, in GiB.
     * 
     * - `region` - The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * - `updated` - When this Volume was last updated.
     * 
     * - `linode_id` - If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
     * 
     * - `filesystem_path` - The full filesystem path for the Volume based on the Volume&#39;s label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args) {
        return getVolume(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Volume.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Volume.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getVolume(GetVolumeArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `id` - The unique ID of this Volume.
     * 
     * - `created` - When this Volume was created.
     * 
     * - `status` - The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
     * 
     * - `label` - This Volume&#39;s label is for display purposes only.
     * 
     * - `tags` - An array of tags applied to this object.
     * 
     * - `size` - The Volume&#39;s size, in GiB.
     * 
     * - `region` - The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * - `updated` - When this Volume was last updated.
     * 
     * - `linode_id` - If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
     * 
     * - `filesystem_path` - The full filesystem path for the Volume based on the Volume&#39;s label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain(GetVolumePlainArgs args) {
        return getVolumePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information about a Linode Volume.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Volume.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getVolume(GetVolumeArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `id` - The unique ID of this Volume.
     * 
     * - `created` - When this Volume was created.
     * 
     * - `status` - The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
     * 
     * - `label` - This Volume&#39;s label is for display purposes only.
     * 
     * - `tags` - An array of tags applied to this object.
     * 
     * - `size` - The Volume&#39;s size, in GiB.
     * 
     * - `region` - The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * - `updated` - When this Volume was last updated.
     * 
     * - `linode_id` - If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
     * 
     * - `filesystem_path` - The full filesystem path for the Volume based on the Volume&#39;s label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("linode:index/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information about a Linode Volume.
     * 
     * ## Example Usage
     * 
     * The following example shows how one might use this data source to access information about a Linode Volume.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.linode.LinodeFunctions;
     * import com.pulumi.linode.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = LinodeFunctions.getVolume(GetVolumeArgs.builder()
     *             .id(&#34;1234567&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes
     * 
     * The Linode Volume resource exports the following attributes:
     * 
     * - `id` - The unique ID of this Volume.
     * 
     * - `created` - When this Volume was created.
     * 
     * - `status` - The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
     * 
     * - `label` - This Volume&#39;s label is for display purposes only.
     * 
     * - `tags` - An array of tags applied to this object.
     * 
     * - `size` - The Volume&#39;s size, in GiB.
     * 
     * - `region` - The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
     * 
     * - `updated` - When this Volume was last updated.
     * 
     * - `linode_id` - If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
     * 
     * - `filesystem_path` - The full filesystem path for the Volume based on the Volume&#39;s label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain(GetVolumePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("linode:index/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
}
