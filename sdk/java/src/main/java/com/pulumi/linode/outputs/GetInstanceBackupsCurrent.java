// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.GetInstanceBackupsCurrentDisk;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceBackupsCurrent {
    /**
     * @return A list of the labels of the Configuration profiles that are part of the Backup.
     * 
     */
    private final List<String> configs;
    /**
     * @return The date the Backup was taken.
     * 
     */
    private final String created;
    private final List<GetInstanceBackupsCurrentDisk> disks;
    /**
     * @return The date the Backup completed.
     * 
     */
    private final String finished;
    /**
     * @return The unique ID of this Backup.
     * 
     */
    private final Integer id;
    /**
     * @return The label of this disk.
     * 
     */
    private final String label;
    /**
     * @return The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
     * 
     */
    private final String status;
    /**
     * @return This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
     * 
     */
    private final String type;
    /**
     * @return The date the Backup was most recently updated.
     * 
     */
    private final String updated;

    @CustomType.Constructor
    private GetInstanceBackupsCurrent(
        @CustomType.Parameter("configs") List<String> configs,
        @CustomType.Parameter("created") String created,
        @CustomType.Parameter("disks") List<GetInstanceBackupsCurrentDisk> disks,
        @CustomType.Parameter("finished") String finished,
        @CustomType.Parameter("id") Integer id,
        @CustomType.Parameter("label") String label,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("updated") String updated) {
        this.configs = configs;
        this.created = created;
        this.disks = disks;
        this.finished = finished;
        this.id = id;
        this.label = label;
        this.status = status;
        this.type = type;
        this.updated = updated;
    }

    /**
     * @return A list of the labels of the Configuration profiles that are part of the Backup.
     * 
     */
    public List<String> configs() {
        return this.configs;
    }
    /**
     * @return The date the Backup was taken.
     * 
     */
    public String created() {
        return this.created;
    }
    public List<GetInstanceBackupsCurrentDisk> disks() {
        return this.disks;
    }
    /**
     * @return The date the Backup completed.
     * 
     */
    public String finished() {
        return this.finished;
    }
    /**
     * @return The unique ID of this Backup.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The label of this disk.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The date the Backup was most recently updated.
     * 
     */
    public String updated() {
        return this.updated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceBackupsCurrent defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> configs;
        private String created;
        private List<GetInstanceBackupsCurrentDisk> disks;
        private String finished;
        private Integer id;
        private String label;
        private String status;
        private String type;
        private String updated;

        public Builder() {
    	      // Empty
        }

        public Builder(GetInstanceBackupsCurrent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configs = defaults.configs;
    	      this.created = defaults.created;
    	      this.disks = defaults.disks;
    	      this.finished = defaults.finished;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.updated = defaults.updated;
        }

        public Builder configs(List<String> configs) {
            this.configs = Objects.requireNonNull(configs);
            return this;
        }
        public Builder configs(String... configs) {
            return configs(List.of(configs));
        }
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        public Builder disks(List<GetInstanceBackupsCurrentDisk> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }
        public Builder disks(GetInstanceBackupsCurrentDisk... disks) {
            return disks(List.of(disks));
        }
        public Builder finished(String finished) {
            this.finished = Objects.requireNonNull(finished);
            return this;
        }
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder updated(String updated) {
            this.updated = Objects.requireNonNull(updated);
            return this;
        }        public GetInstanceBackupsCurrent build() {
            return new GetInstanceBackupsCurrent(configs, created, disks, finished, id, label, status, type, updated);
        }
    }
}
