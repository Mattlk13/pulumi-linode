// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceDisk {
    /**
     * @return A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
     * 
     */
    private final @Nullable List<String> authorizedKeys;
    /**
     * @return A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user&#39;s `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
     * 
     */
    private final @Nullable List<String> authorizedUsers;
    /**
     * @return The Disk filesystem can be one of: `&#34;raw&#34;`, `&#34;swap&#34;`, `&#34;ext3&#34;`, `&#34;ext4&#34;`, or `&#34;initrd&#34;` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).
     * 
     */
    private final @Nullable String filesystem;
    /**
     * @return The ID of the disk in the Linode API.
     * 
     */
    private final @Nullable Integer id;
    /**
     * @return An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/images). *Changing `image` forces the creation of a new Linode Instance.*
     * 
     */
    private final @Nullable String image;
    /**
     * @return The name of this interface. If the interface is a VLAN, a label is required.
     * 
     */
    private final String label;
    /**
     * @return If true, this Disk is read-only.
     * 
     */
    private final @Nullable Boolean readOnly;
    /**
     * @return The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in state.*
     * 
     */
    private final @Nullable String rootPass;
    /**
     * @return The size of the Disk in MB.
     * 
     */
    private final Integer size;
    /**
     * @return An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if &#39;stackscript_id&#39; is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*
     * 
     */
    private final @Nullable Map<String,Object> stackscriptData;
    /**
     * @return The StackScript to deploy to the newly created Linode. If provided, &#39;image&#39; must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*
     * 
     */
    private final @Nullable Integer stackscriptId;

    @CustomType.Constructor
    private InstanceDisk(
        @CustomType.Parameter("authorizedKeys") @Nullable List<String> authorizedKeys,
        @CustomType.Parameter("authorizedUsers") @Nullable List<String> authorizedUsers,
        @CustomType.Parameter("filesystem") @Nullable String filesystem,
        @CustomType.Parameter("id") @Nullable Integer id,
        @CustomType.Parameter("image") @Nullable String image,
        @CustomType.Parameter("label") String label,
        @CustomType.Parameter("readOnly") @Nullable Boolean readOnly,
        @CustomType.Parameter("rootPass") @Nullable String rootPass,
        @CustomType.Parameter("size") Integer size,
        @CustomType.Parameter("stackscriptData") @Nullable Map<String,Object> stackscriptData,
        @CustomType.Parameter("stackscriptId") @Nullable Integer stackscriptId) {
        this.authorizedKeys = authorizedKeys;
        this.authorizedUsers = authorizedUsers;
        this.filesystem = filesystem;
        this.id = id;
        this.image = image;
        this.label = label;
        this.readOnly = readOnly;
        this.rootPass = rootPass;
        this.size = size;
        this.stackscriptData = stackscriptData;
        this.stackscriptId = stackscriptId;
    }

    /**
     * @return A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
     * 
     */
    public List<String> authorizedKeys() {
        return this.authorizedKeys == null ? List.of() : this.authorizedKeys;
    }
    /**
     * @return A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user&#39;s `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
     * 
     */
    public List<String> authorizedUsers() {
        return this.authorizedUsers == null ? List.of() : this.authorizedUsers;
    }
    /**
     * @return The Disk filesystem can be one of: `&#34;raw&#34;`, `&#34;swap&#34;`, `&#34;ext3&#34;`, `&#34;ext4&#34;`, or `&#34;initrd&#34;` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).
     * 
     */
    public Optional<String> filesystem() {
        return Optional.ofNullable(this.filesystem);
    }
    /**
     * @return The ID of the disk in the Linode API.
     * 
     */
    public Optional<Integer> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/images). *Changing `image` forces the creation of a new Linode Instance.*
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return The name of this interface. If the interface is a VLAN, a label is required.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return If true, this Disk is read-only.
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }
    /**
     * @return The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in state.*
     * 
     */
    public Optional<String> rootPass() {
        return Optional.ofNullable(this.rootPass);
    }
    /**
     * @return The size of the Disk in MB.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if &#39;stackscript_id&#39; is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*
     * 
     */
    public Map<String,Object> stackscriptData() {
        return this.stackscriptData == null ? Map.of() : this.stackscriptData;
    }
    /**
     * @return The StackScript to deploy to the newly created Linode. If provided, &#39;image&#39; must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*
     * 
     */
    public Optional<Integer> stackscriptId() {
        return Optional.ofNullable(this.stackscriptId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceDisk defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> authorizedKeys;
        private @Nullable List<String> authorizedUsers;
        private @Nullable String filesystem;
        private @Nullable Integer id;
        private @Nullable String image;
        private String label;
        private @Nullable Boolean readOnly;
        private @Nullable String rootPass;
        private Integer size;
        private @Nullable Map<String,Object> stackscriptData;
        private @Nullable Integer stackscriptId;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceDisk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizedKeys = defaults.authorizedKeys;
    	      this.authorizedUsers = defaults.authorizedUsers;
    	      this.filesystem = defaults.filesystem;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.label = defaults.label;
    	      this.readOnly = defaults.readOnly;
    	      this.rootPass = defaults.rootPass;
    	      this.size = defaults.size;
    	      this.stackscriptData = defaults.stackscriptData;
    	      this.stackscriptId = defaults.stackscriptId;
        }

        public Builder authorizedKeys(@Nullable List<String> authorizedKeys) {
            this.authorizedKeys = authorizedKeys;
            return this;
        }
        public Builder authorizedKeys(String... authorizedKeys) {
            return authorizedKeys(List.of(authorizedKeys));
        }
        public Builder authorizedUsers(@Nullable List<String> authorizedUsers) {
            this.authorizedUsers = authorizedUsers;
            return this;
        }
        public Builder authorizedUsers(String... authorizedUsers) {
            return authorizedUsers(List.of(authorizedUsers));
        }
        public Builder filesystem(@Nullable String filesystem) {
            this.filesystem = filesystem;
            return this;
        }
        public Builder id(@Nullable Integer id) {
            this.id = id;
            return this;
        }
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder rootPass(@Nullable String rootPass) {
            this.rootPass = rootPass;
            return this;
        }
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public Builder stackscriptData(@Nullable Map<String,Object> stackscriptData) {
            this.stackscriptData = stackscriptData;
            return this;
        }
        public Builder stackscriptId(@Nullable Integer stackscriptId) {
            this.stackscriptId = stackscriptId;
            return this;
        }        public InstanceDisk build() {
            return new InstanceDisk(authorizedKeys, authorizedUsers, filesystem, id, image, label, readOnly, rootPass, size, stackscriptData, stackscriptId);
        }
    }
}
