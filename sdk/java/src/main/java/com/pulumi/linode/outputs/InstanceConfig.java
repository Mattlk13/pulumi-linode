// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.InstanceConfigDevices;
import com.pulumi.linode.outputs.InstanceConfigHelpers;
import com.pulumi.linode.outputs.InstanceConfigInterface;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InstanceConfig {
    /**
     * @return - Arbitrary user comments about this `config`.
     * 
     */
    private final @Nullable String comments;
    /**
     * @return A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.
     * 
     */
    private final @Nullable InstanceConfigDevices devices;
    /**
     * @return Helpers enabled when booting to this Linode Config.
     * 
     */
    private final @Nullable InstanceConfigHelpers helpers;
    private final @Nullable List<InstanceConfigInterface> interfaces;
    /**
     * @return - A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://developers.linode.com/api/v4/linode-kernels)).
     * 
     */
    private final @Nullable String kernel;
    /**
     * @return The name of this interface. If the interface is a VLAN, a label is required.
     * 
     */
    private final String label;
    /**
     * @return - Defaults to the total RAM of the Linode
     * 
     */
    private final @Nullable Integer memoryLimit;
    /**
     * @return - The root device to boot. The corresponding disk must be attached to a `device` slot.  Example: `&#34;/dev/sda&#34;`
     * 
     */
    private final @Nullable String rootDevice;
    /**
     * @return - Defines the state of your Linode after booting. Defaults to `&#34;default&#34;`.
     * 
     */
    private final @Nullable String runLevel;
    /**
     * @return - Controls the virtualization mode. Defaults to `&#34;paravirt&#34;`.
     * 
     */
    private final @Nullable String virtMode;

    @CustomType.Constructor
    private InstanceConfig(
        @CustomType.Parameter("comments") @Nullable String comments,
        @CustomType.Parameter("devices") @Nullable InstanceConfigDevices devices,
        @CustomType.Parameter("helpers") @Nullable InstanceConfigHelpers helpers,
        @CustomType.Parameter("interfaces") @Nullable List<InstanceConfigInterface> interfaces,
        @CustomType.Parameter("kernel") @Nullable String kernel,
        @CustomType.Parameter("label") String label,
        @CustomType.Parameter("memoryLimit") @Nullable Integer memoryLimit,
        @CustomType.Parameter("rootDevice") @Nullable String rootDevice,
        @CustomType.Parameter("runLevel") @Nullable String runLevel,
        @CustomType.Parameter("virtMode") @Nullable String virtMode) {
        this.comments = comments;
        this.devices = devices;
        this.helpers = helpers;
        this.interfaces = interfaces;
        this.kernel = kernel;
        this.label = label;
        this.memoryLimit = memoryLimit;
        this.rootDevice = rootDevice;
        this.runLevel = runLevel;
        this.virtMode = virtMode;
    }

    /**
     * @return - Arbitrary user comments about this `config`.
     * 
     */
    public Optional<String> comments() {
        return Optional.ofNullable(this.comments);
    }
    /**
     * @return A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.
     * 
     */
    public Optional<InstanceConfigDevices> devices() {
        return Optional.ofNullable(this.devices);
    }
    /**
     * @return Helpers enabled when booting to this Linode Config.
     * 
     */
    public Optional<InstanceConfigHelpers> helpers() {
        return Optional.ofNullable(this.helpers);
    }
    public List<InstanceConfigInterface> interfaces() {
        return this.interfaces == null ? List.of() : this.interfaces;
    }
    /**
     * @return - A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://developers.linode.com/api/v4/linode-kernels)).
     * 
     */
    public Optional<String> kernel() {
        return Optional.ofNullable(this.kernel);
    }
    /**
     * @return The name of this interface. If the interface is a VLAN, a label is required.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return - Defaults to the total RAM of the Linode
     * 
     */
    public Optional<Integer> memoryLimit() {
        return Optional.ofNullable(this.memoryLimit);
    }
    /**
     * @return - The root device to boot. The corresponding disk must be attached to a `device` slot.  Example: `&#34;/dev/sda&#34;`
     * 
     */
    public Optional<String> rootDevice() {
        return Optional.ofNullable(this.rootDevice);
    }
    /**
     * @return - Defines the state of your Linode after booting. Defaults to `&#34;default&#34;`.
     * 
     */
    public Optional<String> runLevel() {
        return Optional.ofNullable(this.runLevel);
    }
    /**
     * @return - Controls the virtualization mode. Defaults to `&#34;paravirt&#34;`.
     * 
     */
    public Optional<String> virtMode() {
        return Optional.ofNullable(this.virtMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InstanceConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String comments;
        private @Nullable InstanceConfigDevices devices;
        private @Nullable InstanceConfigHelpers helpers;
        private @Nullable List<InstanceConfigInterface> interfaces;
        private @Nullable String kernel;
        private String label;
        private @Nullable Integer memoryLimit;
        private @Nullable String rootDevice;
        private @Nullable String runLevel;
        private @Nullable String virtMode;

        public Builder() {
    	      // Empty
        }

        public Builder(InstanceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comments = defaults.comments;
    	      this.devices = defaults.devices;
    	      this.helpers = defaults.helpers;
    	      this.interfaces = defaults.interfaces;
    	      this.kernel = defaults.kernel;
    	      this.label = defaults.label;
    	      this.memoryLimit = defaults.memoryLimit;
    	      this.rootDevice = defaults.rootDevice;
    	      this.runLevel = defaults.runLevel;
    	      this.virtMode = defaults.virtMode;
        }

        public Builder comments(@Nullable String comments) {
            this.comments = comments;
            return this;
        }
        public Builder devices(@Nullable InstanceConfigDevices devices) {
            this.devices = devices;
            return this;
        }
        public Builder helpers(@Nullable InstanceConfigHelpers helpers) {
            this.helpers = helpers;
            return this;
        }
        public Builder interfaces(@Nullable List<InstanceConfigInterface> interfaces) {
            this.interfaces = interfaces;
            return this;
        }
        public Builder interfaces(InstanceConfigInterface... interfaces) {
            return interfaces(List.of(interfaces));
        }
        public Builder kernel(@Nullable String kernel) {
            this.kernel = kernel;
            return this;
        }
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder memoryLimit(@Nullable Integer memoryLimit) {
            this.memoryLimit = memoryLimit;
            return this;
        }
        public Builder rootDevice(@Nullable String rootDevice) {
            this.rootDevice = rootDevice;
            return this;
        }
        public Builder runLevel(@Nullable String runLevel) {
            this.runLevel = runLevel;
            return this;
        }
        public Builder virtMode(@Nullable String virtMode) {
            this.virtMode = virtMode;
            return this;
        }        public InstanceConfig build() {
            return new InstanceConfig(comments, devices, helpers, interfaces, kernel, label, memoryLimit, rootDevice, runLevel, virtMode);
        }
    }
}
