// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseMysqlBackupsBackup {
    private final String created;
    private final Integer id;
    private final String label;
    private final String type;

    @CustomType.Constructor
    private GetDatabaseMysqlBackupsBackup(
        @CustomType.Parameter("created") String created,
        @CustomType.Parameter("id") Integer id,
        @CustomType.Parameter("label") String label,
        @CustomType.Parameter("type") String type) {
        this.created = created;
        this.id = id;
        this.label = label;
        this.type = type;
    }

    public String created() {
        return this.created;
    }
    public Integer id() {
        return this.id;
    }
    public String label() {
        return this.label;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseMysqlBackupsBackup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String created;
        private Integer id;
        private String label;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseMysqlBackupsBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.type = defaults.type;
        }

        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetDatabaseMysqlBackupsBackup build() {
            return new GetDatabaseMysqlBackupsBackup(created, id, label, type);
        }
    }
}
