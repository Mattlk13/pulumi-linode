// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetDatabaseMysql
    {
        /// <summary>
        /// Provides information about a Linode MySQL Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about a MySQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMysql.Invoke(new()
        ///     {
        ///         DatabaseId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes
        /// 
        /// The `linode.DatabaseMysql` data source exports the following attributes:
        /// 
        /// * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// 
        /// * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
        /// 
        /// * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
        /// 
        /// * `created` - When this Managed Database was created.
        /// 
        /// * `encrypted` - Whether the Managed Databases is encrypted.
        /// 
        /// * `engine` - The Managed Database engine. (e.g. `mysql`)
        /// 
        /// * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
        /// 
        /// * `host_primary` - The primary host for the Managed Database.
        /// 
        /// * `host_secondary` - The secondary/private network host for the Managed Database.
        /// 
        /// * `label` - A unique, user-defined string referring to the Managed Database.
        /// 
        /// * `region` - The region that hosts this Linode Managed Database.
        /// 
        /// * `root_password` - The randomly-generated root password for the Managed Database instance.
        /// 
        /// * `root_username` - The root username for the Managed Database instance.
        /// 
        /// * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
        /// 
        /// * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
        /// 
        /// * `status` - The operating status of the Managed Database.
        /// 
        /// * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
        /// 
        /// * `updated` - When this Managed Database was last updated.
        /// 
        /// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
        /// 
        /// * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
        /// 
        /// ## updates
        /// 
        /// The following arguments are exported by the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// 
        /// * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
        /// </summary>
        public static Task<GetDatabaseMysqlResult> InvokeAsync(GetDatabaseMysqlArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseMysqlResult>("linode:index/getDatabaseMysql:getDatabaseMysql", args ?? new GetDatabaseMysqlArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode MySQL Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about a MySQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMysql.Invoke(new()
        ///     {
        ///         DatabaseId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes
        /// 
        /// The `linode.DatabaseMysql` data source exports the following attributes:
        /// 
        /// * `allow_list` - A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// 
        /// * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
        /// 
        /// * `cluster_size` - The number of Linode Instance nodes deployed to the Managed Database.
        /// 
        /// * `created` - When this Managed Database was created.
        /// 
        /// * `encrypted` - Whether the Managed Databases is encrypted.
        /// 
        /// * `engine` - The Managed Database engine. (e.g. `mysql`)
        /// 
        /// * `engine_id` - The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
        /// 
        /// * `host_primary` - The primary host for the Managed Database.
        /// 
        /// * `host_secondary` - The secondary/private network host for the Managed Database.
        /// 
        /// * `label` - A unique, user-defined string referring to the Managed Database.
        /// 
        /// * `region` - The region that hosts this Linode Managed Database.
        /// 
        /// * `root_password` - The randomly-generated root password for the Managed Database instance.
        /// 
        /// * `root_username` - The root username for the Managed Database instance.
        /// 
        /// * `replication_type` - The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
        /// 
        /// * `ssl_connection` - Whether to require SSL credentials to establish a connection to the Managed Database.
        /// 
        /// * `status` - The operating status of the Managed Database.
        /// 
        /// * `type` - The Linode Instance type used for the nodes of the  Managed Database instance.
        /// 
        /// * `updated` - When this Managed Database was last updated.
        /// 
        /// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
        /// 
        /// * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
        /// 
        /// ## updates
        /// 
        /// The following arguments are exported by the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// 
        /// * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
        /// </summary>
        public static Output<GetDatabaseMysqlResult> Invoke(GetDatabaseMysqlInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatabaseMysqlResult>("linode:index/getDatabaseMysql:getDatabaseMysql", args ?? new GetDatabaseMysqlInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseMysqlArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MySQL database.
        /// </summary>
        [Input("databaseId", required: true)]
        public int DatabaseId { get; set; }

        public GetDatabaseMysqlArgs()
        {
        }
        public static new GetDatabaseMysqlArgs Empty => new GetDatabaseMysqlArgs();
    }

    public sealed class GetDatabaseMysqlInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MySQL database.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<int> DatabaseId { get; set; } = null!;

        public GetDatabaseMysqlInvokeArgs()
        {
        }
        public static new GetDatabaseMysqlInvokeArgs Empty => new GetDatabaseMysqlInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseMysqlResult
    {
        public readonly ImmutableArray<string> AllowLists;
        public readonly string CaCert;
        public readonly int ClusterSize;
        public readonly string Created;
        public readonly int DatabaseId;
        public readonly bool Encrypted;
        public readonly string Engine;
        public readonly string EngineId;
        public readonly string HostPrimary;
        public readonly string HostSecondary;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Label;
        public readonly string Region;
        public readonly string ReplicationType;
        public readonly string RootPassword;
        public readonly string RootUsername;
        public readonly bool SslConnection;
        public readonly string Status;
        public readonly string Type;
        public readonly string Updated;
        public readonly ImmutableArray<Outputs.GetDatabaseMysqlUpdateResult> Updates;
        public readonly string Version;

        [OutputConstructor]
        private GetDatabaseMysqlResult(
            ImmutableArray<string> allowLists,

            string caCert,

            int clusterSize,

            string created,

            int databaseId,

            bool encrypted,

            string engine,

            string engineId,

            string hostPrimary,

            string hostSecondary,

            string id,

            string label,

            string region,

            string replicationType,

            string rootPassword,

            string rootUsername,

            bool sslConnection,

            string status,

            string type,

            string updated,

            ImmutableArray<Outputs.GetDatabaseMysqlUpdateResult> updates,

            string version)
        {
            AllowLists = allowLists;
            CaCert = caCert;
            ClusterSize = clusterSize;
            Created = created;
            DatabaseId = databaseId;
            Encrypted = encrypted;
            Engine = engine;
            EngineId = engineId;
            HostPrimary = hostPrimary;
            HostSecondary = hostSecondary;
            Id = id;
            Label = label;
            Region = region;
            ReplicationType = replicationType;
            RootPassword = rootPassword;
            RootUsername = rootUsername;
            SslConnection = sslConnection;
            Status = status;
            Type = type;
            Updated = updated;
            Updates = updates;
            Version = version;
        }
    }
}
