// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetLkeCluster
    {
        /// <summary>
        /// Provides details about an LKE Cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_cluster = Output.Create(Linode.GetLkeCluster.InvokeAsync(new Linode.GetLkeClusterArgs
        ///         {
        ///             Id = 123,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLkeClusterResult> InvokeAsync(GetLkeClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLkeClusterResult>("linode:index/getLkeCluster:getLkeCluster", args ?? new GetLkeClusterArgs(), options.WithVersion());
    }


    public sealed class GetLkeClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The LKE Cluster's ID.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        public GetLkeClusterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLkeClusterResult
    {
        /// <summary>
        /// The endpoints for the Kubernetes API server.
        /// </summary>
        public readonly ImmutableArray<string> ApiEndpoints;
        /// <summary>
        /// The ID of the node.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
        /// </summary>
        public readonly string K8sVersion;
        /// <summary>
        /// The base64 encoded kubeconfig for the Kubernetes cluster.
        /// </summary>
        public readonly string Kubeconfig;
        public readonly string Label;
        /// <summary>
        /// Node pools associated with this cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLkeClusterPoolResult> Pools;
        /// <summary>
        /// This Kubernetes cluster's location.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The status of the node. (`ready`, `not_ready`)
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The tags applied to the cluster.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetLkeClusterResult(
            ImmutableArray<string> apiEndpoints,

            int id,

            string k8sVersion,

            string kubeconfig,

            string label,

            ImmutableArray<Outputs.GetLkeClusterPoolResult> pools,

            string region,

            string status,

            ImmutableArray<string> tags)
        {
            ApiEndpoints = apiEndpoints;
            Id = id;
            K8sVersion = k8sVersion;
            Kubeconfig = kubeconfig;
            Label = label;
            Pools = pools;
            Region = region;
            Status = status;
            Tags = tags;
        }
    }
}
