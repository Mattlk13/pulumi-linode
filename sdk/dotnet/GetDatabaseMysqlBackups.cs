// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetDatabaseMysqlBackups
    {
        /// <summary>
        /// **NOTICE:** Managed Databases are currently in beta. Ensure `api_version` is set to `v4beta` in order to use this data source.
        /// 
        /// Provides information about Linode MySQL Database Backups that match a set of filters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about all backups for a MySQL database:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var all_backups = Output.Create(Linode.GetDatabaseMysqlBackups.InvokeAsync(new Linode.GetDatabaseMysqlBackupsArgs
        ///         {
        ///             DatabaseId = 12345,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// Get information about all automatic MySQL Database Backups:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var auto_backups = Output.Create(Linode.GetDatabaseMysqlBackups.InvokeAsync(new Linode.GetDatabaseMysqlBackupsArgs
        ///         {
        ///             DatabaseId = 12345,
        ///             Filters = 
        ///             {
        ///                 new Linode.Inputs.GetDatabaseMysqlBackupsFilterArgs
        ///                 {
        ///                     Name = "type",
        ///                     Values = 
        ///                     {
        ///                         "auto",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes
        /// 
        /// Each backup will be stored in the `backups` attribute and will export the following attributes:
        /// 
        /// * `created` - A time value given in a combined date and time format that represents when the database backup was created.
        /// 
        /// * `id` - The ID of the database backup object.
        /// 
        /// * `label` - The database backup’s label, for display purposes only.
        /// 
        /// * `type` - The type of database backup, determined by how the backup was created.
        /// </summary>
        public static Task<GetDatabaseMysqlBackupsResult> InvokeAsync(GetDatabaseMysqlBackupsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseMysqlBackupsResult>("linode:index/getDatabaseMysqlBackups:getDatabaseMysqlBackups", args ?? new GetDatabaseMysqlBackupsArgs(), options.WithDefaults());

        /// <summary>
        /// **NOTICE:** Managed Databases are currently in beta. Ensure `api_version` is set to `v4beta` in order to use this data source.
        /// 
        /// Provides information about Linode MySQL Database Backups that match a set of filters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about all backups for a MySQL database:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var all_backups = Output.Create(Linode.GetDatabaseMysqlBackups.InvokeAsync(new Linode.GetDatabaseMysqlBackupsArgs
        ///         {
        ///             DatabaseId = 12345,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// Get information about all automatic MySQL Database Backups:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var auto_backups = Output.Create(Linode.GetDatabaseMysqlBackups.InvokeAsync(new Linode.GetDatabaseMysqlBackupsArgs
        ///         {
        ///             DatabaseId = 12345,
        ///             Filters = 
        ///             {
        ///                 new Linode.Inputs.GetDatabaseMysqlBackupsFilterArgs
        ///                 {
        ///                     Name = "type",
        ///                     Values = 
        ///                     {
        ///                         "auto",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Attributes
        /// 
        /// Each backup will be stored in the `backups` attribute and will export the following attributes:
        /// 
        /// * `created` - A time value given in a combined date and time format that represents when the database backup was created.
        /// 
        /// * `id` - The ID of the database backup object.
        /// 
        /// * `label` - The database backup’s label, for display purposes only.
        /// 
        /// * `type` - The type of database backup, determined by how the backup was created.
        /// </summary>
        public static Output<GetDatabaseMysqlBackupsResult> Invoke(GetDatabaseMysqlBackupsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatabaseMysqlBackupsResult>("linode:index/getDatabaseMysqlBackups:getDatabaseMysqlBackups", args ?? new GetDatabaseMysqlBackupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseMysqlBackupsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the database to retrieve backups for.
        /// </summary>
        [Input("databaseId", required: true)]
        public int DatabaseId { get; set; }

        [Input("filters")]
        private List<Inputs.GetDatabaseMysqlBackupsFilterArgs>? _filters;
        public List<Inputs.GetDatabaseMysqlBackupsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatabaseMysqlBackupsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If true, only the latest backup will be returned.
        /// </summary>
        [Input("latest")]
        public bool? Latest { get; set; }

        /// <summary>
        /// The order in which results should be returned. (`asc`, `desc`; default `asc`)
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. (`created`)
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        public GetDatabaseMysqlBackupsArgs()
        {
        }
    }

    public sealed class GetDatabaseMysqlBackupsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the database to retrieve backups for.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<int> DatabaseId { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetDatabaseMysqlBackupsFilterInputArgs>? _filters;
        public InputList<Inputs.GetDatabaseMysqlBackupsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDatabaseMysqlBackupsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If true, only the latest backup will be returned.
        /// </summary>
        [Input("latest")]
        public Input<bool>? Latest { get; set; }

        /// <summary>
        /// The order in which results should be returned. (`asc`, `desc`; default `asc`)
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. (`created`)
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        public GetDatabaseMysqlBackupsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDatabaseMysqlBackupsResult
    {
        public readonly ImmutableArray<Outputs.GetDatabaseMysqlBackupsBackupResult> Backups;
        public readonly int DatabaseId;
        public readonly ImmutableArray<Outputs.GetDatabaseMysqlBackupsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? Latest;
        public readonly string? Order;
        public readonly string? OrderBy;

        [OutputConstructor]
        private GetDatabaseMysqlBackupsResult(
            ImmutableArray<Outputs.GetDatabaseMysqlBackupsBackupResult> backups,

            int databaseId,

            ImmutableArray<Outputs.GetDatabaseMysqlBackupsFilterResult> filters,

            string id,

            bool? latest,

            string? order,

            string? orderBy)
        {
            Backups = backups;
            DatabaseId = databaseId;
            Filters = filters;
            Id = id;
            Latest = latest;
            Order = order;
            OrderBy = orderBy;
        }
    }
}
