// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// **NOTICE:** Managed Databases are currently in beta. Ensure `api_version` is set to `v4beta` in order to use this resource.
    /// 
    /// Provides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.
    /// For more information, see the [Linode APIv4 docs](https://www.linode.com/docs/api/databases/).
    /// 
    /// Please keep in mind that Managed Databases can take up to an hour to provision.
    /// 
    /// ## Example Usage
    /// 
    /// Creating a simple MySQL database instance:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foobar = new Linode.DatabaseMysql("foobar", new Linode.DatabaseMysqlArgs
    ///         {
    ///             EngineId = "mysql/8.0.26",
    ///             Label = "mydatabase",
    ///             Region = "us-southeast",
    ///             Type = "g6-nanode-1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Creating a complex MySQL database instance:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foobar = new Linode.DatabaseMysql("foobar", new Linode.DatabaseMysqlArgs
    ///         {
    ///             AllowLists = 
    ///             {
    ///                 "0.0.0.0/0",
    ///             },
    ///             ClusterSize = 3,
    ///             Encrypted = true,
    ///             EngineId = "mysql/8.0.26",
    ///             Label = "mydatabase",
    ///             Region = "us-southeast",
    ///             ReplicationType = "asynch",
    ///             SslConnection = true,
    ///             Type = "g6-nanode-1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Attributes
    /// 
    /// In addition to all arguments above, the following attributes are exported:
    /// 
    /// * `id` - The ID of the Managed Database.
    /// 
    /// * `ca_cert` - The base64-encoded SSL CA certificate for the Managed Database instance.
    /// 
    /// * `created` - When this Managed Database was created.
    /// 
    /// * `engine` - The Managed Database engine. (e.g. `mysql`)
    /// 
    /// * `host_primary` - The primary host for the Managed Database.
    /// 
    /// * `host_secondary` - The secondary/private network host for the Managed Database.
    /// 
    /// * `root_password` - The randomly-generated root password for the Managed Database instance.
    /// 
    /// * `root_username` - The root username for the Managed Database instance.
    /// 
    /// * `status` - The operating status of the Managed Database.
    /// 
    /// * `updated` - When this Managed Database was last updated.
    /// 
    /// * `version` - The Managed Database engine version. (e.g. `v8.0.26`)
    /// 
    /// ## Import
    /// 
    /// Linode MySQL Databases can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import linode:index/databaseMysql:DatabaseMysql foobar 1234567
    /// ```
    /// </summary>
    [LinodeResourceType("linode:index/databaseMysql:DatabaseMysql")]
    public partial class DatabaseMysql : Pulumi.CustomResource
    {
        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// </summary>
        [Output("allowLists")]
        public Output<ImmutableArray<string>> AllowLists { get; private set; } = null!;

        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database instance.
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Output("clusterSize")]
        public Output<int?> ClusterSize { get; private set; } = null!;

        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Whether the Managed Databases is encrypted. (default `false`)
        /// </summary>
        [Output("encrypted")]
        public Output<bool?> Encrypted { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine.
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
        /// </summary>
        [Output("engineId")]
        public Output<string> EngineId { get; private set; } = null!;

        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        [Output("hostPrimary")]
        public Output<string> HostPrimary { get; private set; } = null!;

        /// <summary>
        /// The secondary host for the Managed Database.
        /// </summary>
        [Output("hostSecondary")]
        public Output<string> HostSecondary { get; private set; } = null!;

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)
        /// </summary>
        [Output("replicationType")]
        public Output<string?> ReplicationType { get; private set; } = null!;

        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        [Output("rootPassword")]
        public Output<string> RootPassword { get; private set; } = null!;

        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        [Output("rootUsername")]
        public Output<string> RootUsername { get; private set; } = null!;

        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
        /// </summary>
        [Output("sslConnection")]
        public Output<bool?> SslConnection { get; private set; } = null!;

        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The Linode Instance type used for the nodes of the  Managed Database instance.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine version.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseMysql resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseMysql(string name, DatabaseMysqlArgs args, CustomResourceOptions? options = null)
            : base("linode:index/databaseMysql:DatabaseMysql", name, args ?? new DatabaseMysqlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseMysql(string name, Input<string> id, DatabaseMysqlState? state = null, CustomResourceOptions? options = null)
            : base("linode:index/databaseMysql:DatabaseMysql", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseMysql resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseMysql Get(string name, Input<string> id, DatabaseMysqlState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseMysql(name, id, state, options);
        }
    }

    public sealed class DatabaseMysqlArgs : Pulumi.ResourceArgs
    {
        [Input("allowLists")]
        private InputList<string>? _allowLists;

        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// </summary>
        public InputList<string> AllowLists
        {
            get => _allowLists ?? (_allowLists = new InputList<string>());
            set => _allowLists = value;
        }

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Input("clusterSize")]
        public Input<int>? ClusterSize { get; set; }

        /// <summary>
        /// Whether the Managed Databases is encrypted. (default `false`)
        /// </summary>
        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
        /// </summary>
        [Input("engineId", required: true)]
        public Input<string> EngineId { get; set; } = null!;

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)
        /// </summary>
        [Input("replicationType")]
        public Input<string>? ReplicationType { get; set; }

        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
        /// </summary>
        [Input("sslConnection")]
        public Input<bool>? SslConnection { get; set; }

        /// <summary>
        /// The Linode Instance type used for the nodes of the  Managed Database instance.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public DatabaseMysqlArgs()
        {
        }
    }

    public sealed class DatabaseMysqlState : Pulumi.ResourceArgs
    {
        [Input("allowLists")]
        private InputList<string>? _allowLists;

        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// </summary>
        public InputList<string> AllowLists
        {
            get => _allowLists ?? (_allowLists = new InputList<string>());
            set => _allowLists = value;
        }

        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database instance.
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Input("clusterSize")]
        public Input<int>? ClusterSize { get; set; }

        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Whether the Managed Databases is encrypted. (default `false`)
        /// </summary>
        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        /// <summary>
        /// The Managed Database engine.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)
        /// </summary>
        [Input("engineId")]
        public Input<string>? EngineId { get; set; }

        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        [Input("hostPrimary")]
        public Input<string>? HostPrimary { get; set; }

        /// <summary>
        /// The secondary host for the Managed Database.
        /// </summary>
        [Input("hostSecondary")]
        public Input<string>? HostSecondary { get; set; }

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)
        /// </summary>
        [Input("replicationType")]
        public Input<string>? ReplicationType { get; set; }

        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        [Input("rootPassword")]
        public Input<string>? RootPassword { get; set; }

        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        [Input("rootUsername")]
        public Input<string>? RootUsername { get; set; }

        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
        /// </summary>
        [Input("sslConnection")]
        public Input<bool>? SslConnection { get; set; }

        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The Linode Instance type used for the nodes of the  Managed Database instance.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        /// <summary>
        /// The Managed Database engine version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public DatabaseMysqlState()
        {
        }
    }
}
